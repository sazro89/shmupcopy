picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTEzIDIxOjI5OjAxIixtb2RpZmllZD0iMjAyNS0w
Mi0wNSAxMTozODo1NCIscmV2aXNpb249MjIzMV1dbHo0AAwOAAA5PwAA8yF7WzBdPXtibXA9cHh1
AEMgEBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIANd5PTAsem9vbT0xMn0sPwDwCgcH
BBAnIAcvHgcABx4PFx4XDg0HDQ4XHg0RAF8uByAnEE8AJkAODxcOSwAQB1UAPw4NDlEAIv8GBgcE
EBogChcKEAoXCgAKNwq3ADcAQgAasQoJBDAZMAkACQAZBADQGRoZAAkQCQoXCgkQCVIAzwAJCgBX
AAqXAHcgV50AG9AQDARQCRAJsAkQCZAJVQBgAAlACRAJFABwEAkwOTAJIGkAIRAKEACRAAkACQoH
EAcKiwD-CCAKBzAHCiAZIApQCiAJ8AEJsAkgCZAJgAAcvwoEAAmwCfBxCdAJOQAbTxAE8PAyABry
Hg8SBFAfF7AOEQ6QDgEHBgEOgA4hDQEOYA4BLBEOUA4BDBccEQ5ADgEMBwwBDAoAUSEMIQ4wCADA
AQcBDiAOERwBBxEGCgDwDwENAQwHEQ0GDQEOAA4BLSENBg0HDQEeAR0GLQYNFgoAkQ0GBxYHBg0G
HSIAgAcGDQEGBw0hOwBABREVDWAAX2EOYG4w9QAb8QISBGAfF8AOEQ6gDgEGBwEOkMMAEXDDABNg
wwAXUMMAExHDABURwwByAQYBHBEHAcUAYwYNAQwXEcUAUD0xHQYHwwBQFj0GDRbCABcWwgBhEQcd
EQcxNQAiFQHAAE9xDmB_wAAb8AQSEgRwHxfgDhEOwA4BFgEOoA5RjQEQPIwB8gYBDBcsAQ5gHgEM
BxwBDAEeQA4hDDGAAUEHAQwxvwB1MA4BBhEHEYQBRQYNEReFAQCrAFENMQ0GDcYAcSYNBj0GDSaT
AQmLAVAxBwEWAcoA-wMeAQYBBREFAQYBHlAOcQ6AfkCMAScCTwJwAQ0hDoAOEccAoQ4RDBccAQ5Q
DhGMASABDs8AMyEMEc8AAwoAUAYBBxEcjAEQEM0AYxEXDAENBswAxh0xPQEeARYNBj0WHcUAIhYN
wwBAER0HEZACbw0VARUGAYwBIhEPwAADDwMhBgdGAkENIQ5wwAATUMAAFUDAABEwwAAVAcAABI0B
MgEcEb4AUg0RBwwBigFxDQcNBg0hLUMCWA0GLQYdhgEAIgBAIQ0HBiEDEgHEAD4RBQEPAw8EBBUP
MgCwTwEBBAcxABq-AwMEAAcABwwHAAdKBhsgAwY5AF83DCcwB6gFGyIDCDkAERc7AA89ACIwZwwX
sQAQEAQAD4MBfvIQCBAEIBlQGUAJFwkwCRcJIAk3CRAJNwkACQcKFwoHGQYAMRoXGgQA-wYKCRoJ
CjkaWRo5ADkAGRAZEAkgGSBvABrxAQYQBBAZMBkwGSAJGgkQCRcEABAA0gcTGQQAYCkaORr5BfEH
LxAZLwEbMQQQBJUAAQIA0AAJGhkXGRcZGhka_QEXAA96CBzQCgQwF1BXIHcQdwD3Dl8IL0A36gAM
GThBAPEHDA4EQBeQF5AXYAcQFxAHIBcANwAXEAYA-wQgdxAHAHcAxwCXIHcwd0BXYDcwWgAZYQ4N
BCAHUAIA-xPwBxewF1AHQBdABwAHIDcgB0BXcFdABxBXEAdAV4A3oBdQWQAZQBAOBDBVAGE0B9AH
8CFWAJ9wF8A3sDfAF2BIAAwPhQIdDTEA8QAQHhA_EB4gDhEeNB4RDgCiB0AEPw8EGAbxCB4BDQEE
HAcsBAENAR4RAgQMBxwJDAQCJwBxCAQsGQwECH4F8Q4CDgQMOQwEDgIBHgEYBAc5BwQYAR4BAg4I
BDcECBYAkAIIDgw0DA4IAkgAcQgCDB4MAghIAGQRAg48DgJ5ADMSGBJ4AP8EITIhDQEeIR4xHiEO
AC4QPhAuANkAGYASEQRgPqAuNB0HAM4AkT5ADgEEHQctBA8JkwIEDQcdCQ0EAgkHpAgELRkNBAgB
Dw3PAEMNOQ0ElwAE0QAAKQAG0wABDgBQCA4NNA3VAAAoAKIGAQIIAg0eDQIIHgBQDBECDj1EAEAQ
DiEO2gCwEQ4wLgAOATIBDAb7Br9RDAEOgE4RDuAeMNoAHmKwHjQegA6oASMOYNsAANIGB9sAJg4w
2QAnDiDWAAKuAAPXAABtASUPDdgAEQygAQPXAAKgAQTVAEMRDhAe0wDwBh4wDhESERIRDmAeERYR
HpAOARwBDpgIP_AecLACHg8xAP----------------------xqcICASsEUwBHAE8BAA-TBGsRAAc
YLwBXBFsAQIAP1whnIAAIjBsAVwCAB8xPgAjP1wBfLoAJBSc_AASMcAAD4AAHW_cMTwBbCF_ACUA
vgA-bCFMeAEmIJwxOAECBAAfvFoCHg8xAP----BhCAgEfAEMAgAv-CE5ABwj-CE6AB98OQAc7yEs
USxRPEE8QTxRLFEsdwAdk2sBK0ErAQYdAQUAnzYrAQ0RDTsxe0gAHKERWwYxKwYRFgEbBQCvRgEb
HRENARtBq0gAHFH7CQkKGwMANCkKGwsAPyMKi0cAHEuBRwYRAwA-B0YBRQAc0R01LQU2BR0FBhUG
BR0KACAHLAUAYh0VHQUHFgUAHw1UACAhBi1VABANBgAULVYAbzYFHVUtRU8AHSILaQIAIhtZAgAP
PwAcAzYAExtGAB8LPwAc-wHxBAYdQQYdQTYxDRANMTBxPwAccHEGYQYRFiEEAI9GIR0QDSFAoUIA
HO_RVxFXEVYRVhENEC0hQIAAHXEBBk0RBzYNBAD-Al0RXBENBRYFDREADRUNABFQLQIdEw0YAggd
AhYdFAA-ZR1VUQAcQAuTCwMCAC-7HzkAHGBTGwMrMzs6AB8ZOgAcL-kwMQAcsrs0GxQ5GwRJCwRZ
QgIPQAAdP3T5HDMAHL97NDs5FBtJBBtZBLUCI8C9BQ0VLQUBBREdBQECAN8dEQUhDRVBDQEFQQ1h
TAAdqRUNJQ0FEQUhBQECAC-xB0kAHJF9FQ0FPREFAQWaABAFlADPBQ0xBQEdMQUBBQ1hFwQd8QMF
DRUNFR0VDQUNBgUdFQ0GJR31AP8CDRUGFR0GBQYFDQUNNT0FLQVYAB0v_DCgBCgvOzlVBh0-_SS7
MgAcA28AEAvVBC85u8MDHjBRDWECAK8dBUEdUT0BBRF9QgAcf-EeBREFEb02ABwwYQ1R5AG-QQUd
UR0hBQ0BHQFEAB8v_DAxAE0f_zEAHmMKAwsDKwPGBB8JPgAcxQNhCwNBBwNRBwsDUQoAEUEEAA9K
ABybQQMbUQMLQQMbCQAPRwAc-wj7AUEbAQcRFwELAQcBFyEDYQMBEwEDEdQCHf8OiyFLAQcROwEH
ISsRBwEHARsBAwEHESsDQSsBCxGUAB0SK2IB8QBzNQMlFAUEBQQFJAWkAgQCAB90SwAc-wsLA0sj
SwMFEwsDCxMEBUMFFEUCFFIkQjQiBEkAHGAbAxsDCyMcAV-xGTcBF0gHHXDxGRMBEwETRgAP9Qkd
gPEHA1ETUQMLfAAwAQMLiABPARNLAeoBHsDxAANhE1ELA1ETERNIAI8BAwsTGwMBS0cAHPEA_wJB
GwEXEQcxFwEHcQMRLwIPLgIdgLshOxEHASshKAL-AwcBBxEbEQcBAwELQQMrEQMBK00AHAMaAhIU
CAAfEg4ACCKSBAgAD2EAIxA0BgD-BjIWBQIEEgYlMjUCBCIVIgRCBAIEUlEAHTILUwvIAYATWwN7
A1sDCwQAAKMCEDOnAg9NAByQ6wFbAQNLAQNbAwAhE0sGAA9DABxAewFrAwMAcUsTAVsDAVsJAA8X
Ah1QcwFTEQOhAjARA1FdArEUAQMbAwESATMBEgoAHxOxAh8vg1sgATH-BPsAA1sjOxMLAzsDGwM7
QysDG1OJAB1v8ghxfHF8iAsdwCIUMkQiFEIBBEIBDBkoUAFcAQxRBgAPWgErERG5AwAOABEbfgMR
CxoAD9MAHf8DSwETWwEDawFbAwJbAwJrA-sAQQAc-wITAUsDAVsBawIDWwIDWwP7B0AAHv8GEwEj
ATMBAwFTAQJTElMCEzsjWwN7HAEmvwRRBCIUIhMyQxIjRQApMAMiFF8BryIBAwsjEgETCzO3Ah8A
3AMRO6oCbyUzBSQ1RLwGJvACISIxAgQSEQwCBDIcUgwBDDJIERA8ThFfMQwhPBFHAigQBKEDQCIT
ASI_Am8SIwsDATPmAB0f-DgJHW-8CicMB-y2AB1--BEHDCf8CjYAHPAMawVbBQxLBQcNOwUNBg0r
FQ0GDRsFLQYNCwUdEQARBQIAHwYnDB1PdXz9IDMAHIAFaw0FWx0FS3EAYDsNFQ0FK1oNrxsNNQ0F
Cw1FDQVPABwS8YgNIwEVCAA-9QDzuAMdb-MQC1Mb0wQFIW8DEiMS8xA3ABz-AvsLBSsFLQUtBSsF
KwUjBSMFnQMdL-EwJQ4eIwUN5QFTLQYNBS0MAA8UAAoPCwIeH-2WAB0qDWUCAA8-ABxvjRUNBf0j
fAEhAH4B3ysNAxsFKw0jBSsFAytFAB_vOy0Faw07Iw0DWz8AIPAABwErBRsBAy0FDQEDOwULWAUv
BQPACiM-IVeBDAIfgi0HDAUtBQYlNRAgBQ0nEBAWDAAgDSYLAH82FQ1GBQ1WWAAcX3x1ffYYNAAc
-wQH5R1VFg1FJg01Ng0lRg0VVg0FdgAfcCYdRg0WDTYEAC89lj8AHFErBQNbDQMAOgUDGxgCH3tL
ACghKy0NAE8rIw0DFhceEAB2CgCmAiALAyQSIxMBCwA-IwULmQwfRCsFE0uVABdbDAAPswIdOQsF
VgMAX2ULYwtjRAAcP-YYdZoFHjhWBQsDAAF3AA8kAx0jlj0cAg9-AAxQbT04fX0=
:: gfx/anilib.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEyLTE1IDIzOjA2OjA5Iixtb2RpZmllZD0iMjAyNC0x
Mi0xNiAwNjoyOTozNCIscmV2aXNpb249NF1dbHo0AFQAAABYAAAAgHt7MTMsMTQsBgARNQkAETYJ
APAIN30sezksMTAsMTEsMTJ9LHs2LDcsOCwXAPAHMjMsMjQsMjUsMjZ9LHsxOCwxOSwyMBkAsDEs
MjJ9LHsyN319
:: gfx/enemy-01.png
b64$iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8-9hAAAAAXNSR0IArs4c6QAAAYFJREFU
OI2NkzFLw1AUhb_Ekr-QyW7Bwf_gs1g7SFIqnbKIcwkEuoQsQqB0li6dgpWELG3pXP_DiGTTxd_Q
oXF4vfGl7eCBQN5955y8e3OewR5VsKgAjHhg6GvBYV3WdbGzSgH46roAZMVU1_PYIwB0nhEPjJaI
k2ef7fKdziplev6NM-YbBtnThNHnGQ8311zdXtB5nFAFi6olhO3yndl60xTbl1C8qROMfXiaMFpv
GsamvMzWG7xS29HEfPTrslcqbm1gxAND_o4KzeGEWOfIDEyZgVcCwfCP_dE-EoPieKUaZhUsqrqF
qCghTv6OfwipxUnjpLVBaFsQDHHyNpnXg95P48m8Hk7ehmCouHu00BEnysQ1lYkGZ_yDvVOcUwZz
C7AtojghzC2iFx-Sndp0TcL7V6KiJLQtxd3jKIleCdGdC65JA_mOME9rsfwF4zCJeh5kWNLz3KJO
4vBxwlfX5SiJQvRKGsOSL88OklgbyIaESloS6HXd5Ojq-vc6S_0XnbbNGOdESrIAAAAASUVORK5C
YII=
:: gfx/enemy-02.png
b64$iVBORw0KGgoAAAANSUhEUgAAABIAAAARCAYAAADQWvz5AAAAAXNSR0IArs4c6QAAAYBJREFU
OI2VkzFrwkAUx-8n4ldw0i10yHewc6k6mESETFlKP0Ag4FBxKQTEuXTpFBATstTSuXbo4locstml
n6FDr8P5LneXKPQPR5J3--fLe7kXhjPi0YqrzyyesFPe5rnkrFhW9k7Bmqaxu0kBAMuLL7jTUDNn
94uTVTbq6BrE6sm4Ow2RFUt0N6lcBJYgqib4UYhWDyi24n4-lmHyJA_hhFUqmhcKqQaiet6eP2Ws
Uakm8suM-bgCAYQn_AEeX151kPamOCnbMkWxOJFVHfoeWDxhGmhmtYDIh5u3kQVDYPitrSwYws3b
QOQLr6LKHCFOBMxrCJgidxoC1q-wGCDwaMU7tsO37x_8Yzv8znI4x0Bcd2vOo5VYu7W217Edrs6U
rIhO4KkFwGphPvLEhld2Px95mOWp8BiSIDqBQ99Dd5MCeQrk5VHTNyEIfWTKZ9SeDMQTVjucR8jN
9RUuBzb824UGa1KymqDCTKmzo_XURo8yf1AAILjZ2r9Fp2jG-wAo-dIT4VkPIwAAAABJRU5ErkJg
gg==
:: gfx/enemy-03.png
b64$iVBORw0KGgoAAAANSUhEUgAAABIAAAARCAYAAADQWvz5AAAAAXNSR0IArs4c6QAAAYRJREFU
OI2Vky9vwkAYxn9ttn6FKXANAj-JJxiI0jIWVN0_AAkJhlSSLOgFg1jI-pTMDDIzA4iZ2QVRBwaL
RXATt956bUe2Sy7pvc_TX56_753BkSU6DyJ5NvpN4zfvyTHAJBrk1o8BNXOhXBehcy7Ex5O2Q_dc
FMp1kU4KYKYhxWnIoLTB7bZl0a4o3e22GZQ2FKdh5rfNNMTfJ1S7AtFCfq8aquzvycC0RABBlCDl
QDKeJEhL02n9qKtGBgLSk0kVN3exfBeCqhBUZaN3WyHu0PduK7Vv32L5rpqvxj9-_eTNtggcD7c-
ZkINd7TVgkz8Gu7zGXRa9J5DTl8_laZAw9krPkB-DJ0Wrmcy8WsayO22wT5Ij20xnL0qzUj2CORE
gmhPz7YI7i8hPEinZ9K7elTayJLl9YWH0W8aamrrCw_AkYWEOJ4C4Elb4HgZiJYoXulkMTjvHCfJ
BcUwkKMFGN-KG966vtFSpN9b5tHGhjjdPDGZdIo-r-iO-fZQ-w37C_QLffv1evDJCm8AAAAASUVO
RK5CYII=
:: gfx/myspr.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTIwIDIyOjE5OjIyIixtb2RpZmllZD0iMjAyNS0w
MS0yMyAwMDozODozMSIscmV2aXNpb249MTZdXWx6NABMAQAAzgEAAPAFe3s4LDE1LDE4LDUsOH0s
ezksMTYOABE3DgAgMTAMAEIxOCw4DwAaMR4AEzI7AAIeAEAyNCw4IAAwMywwDgAwNSw2DgASMg4A
MDYsNA4AEjEOACA3LFoAUDAsNSw5DwAgOCxLABA0MQAQMxAAEDkNAMExMyw3LDEyfSx7MzA7AAFf
AAAgAEAxNywxSgABTABjMTgsMywzWQBjMTksMyw2DQBkMjAsMyw4DQAXMQ0AITMyUQATNrkAIDMz
xQBCMTcsOQ8AGTQPAFAxLDcsN2QAAEYABwwAAGkAEzftABA0zQBAOSw1LK8AETVdAOAyLDgsNX0s
ezYsIjE2IhAA8AEiOCIsNn0seyIzNSIsIjI4BQBiNyIsIjEzBQAAGwAAEAAxNCIsCAARMQwABBYA
JDE0BQARNwQAcH0sezAsIjYVAKA2IiwiMiIsMH19
:: gfx/ship.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTEzIDIxOjI1OjE4Iixtb2RpZmllZD0iMjAyNC0x
MC0xMyAyMToyNToxOCIscmV2aXNpb249MF1dbHo0AAcEAACpNgAA8yF7WzBdPXtibXA9cHh1AEMg
EBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIANp5PTAsem9vbT0xMn0sPwBP8gHtAgIA
CA9PAB1--QHWHQa9BQQAGz-F-QFoAB0pAg0CAF79AQL9DwMAD1YAHTEKEBoCAAQIACsaAAgAHxAi
AFMPuAAdL-DwMgCB8A1gEcABBwYBsCENAZABLBGAAQwXHBFwAQwHDAEMCABAIQwhYAYA8BkBBwFQ
ERwBBxEGAVABDQEMBxENBg0BMAEtIQ0GDQcNASABHQYtBg0WCgD-Dw0GBxYHBg0GHQEwAQcGDQEG
Bw0hUAEFERUNEXBhMKIAIS8GB6IABCBgEaIAIlARogCQQAEGARwRBwEGCgBgDQEMFxEGkAD0BD0x
HQYHARABHRY9Bg0WARABDRahAP8CIBEHHREHMUABBhUBFQ0RYHGfACKAFgGgUZABPAGcACAsAZwA
8AEcAQwBUCEMMQwhMAEHAQwxngBgMAEGEQcRQgEAIwExDREXQwEQACMB9gQGDTENBg0GBxEmDQY9
Bg0mER0GRQH-AwAxBwEWAQcxMAEGAQURBQEGAacAJPEEBwYBoAENIaARLAGAEQwXHAFwEUYBgAFg
IQwhDBFQqgABCADwAgYBBxEcAQYBMAENBhEXDAENswDgBwYdMT0BEAEWDQY9Fh1PAQKkAADzAc8x
BxEdBxFAEQ0VARWfACYvBgefAAkiAWCfACABYEcBQQEcEUBFATAHDAGHAnANBw0GDSEtWgFAFg0G
LdoBFQFEAWABMCENBwaXAr8BUBENFREFAXBhQI0DgQ8yABz-BQQGBAAfGAAOFx4XHh8XHh0OAB4A
QQAafwgIBCAH8Cw0AB_PUAcMB1AH8Bw6ACC-J0AHDAdAF9AH8AU_ACYDQgA-YAdAQwAiBUUAf1AH
YAdQB0DZAX7yEAgQBCAZUBlACRcJMAkXCSAJNwkQCTcJAAkHChcKBxkGADEaFxoEAP8GCgkaCQo5
GlkaOQA5ABkQGRAJIBkgbwAhAHEANRoJMHUAWAoXCgkQBgAxGRoZBAARWQIAbwkAGQAJMGsAJQxv
ADIwCRoEABI5AgBfQBlQGSBnAR7-BzcXsFeAd3B3YJdQl1CXYHeAV6A38BZHAB3xBGAX0BfQF6AH
EBcQB2AXADcAF1AGAP8AYHdQBwB3AAcwt0CXYHdwXgAkYPAEB1AHcD8D-xMLF9AXcAdAF0AHIAcg
NyAHYFeQV2AHEFcQB2BXoDfAF-AXXAAdEDBXAGE0B9AH8CFYAF9wF8A3sEoAIi-w8DIA--------
--------------------------------------------------VQPTEyfX0=
:: gfx/stage.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTEzIDIxOjI2OjIzIixtb2RpZmllZD0iMjAyNC0x
MC0xMyAyMToyNjoyMyIscmV2aXNpb249MF1dbHo0AP8BAABtNAAA8yF7WzBdPXtibXA9cHh1AEMg
EBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIAMp5PTAsem9vbT04fSw_AE-yAe0CAgAI
D04AHH-9AdYdBr0FBAAbP8X9AWcAHCkCDQIAXv0BAv0PAwAPVQAcMQoQGgIABAgAKxoACAAfECIA
Uw_3ABwv8PAxAP-------6TH8gBdPxW9Pp0ePR59BABinV6dXt0eAgBvnT69Pv0GWAAzDwQABQ9k
ACIv8PDiAf8Uum0fFd0evT69Pt0eAgBvvV6dXv0F2gErAUgABwQAb91_fX79BFQAM2-9AB7dHn0j
Aimf8gA9HxUdHp0eBAAAMX59frEAAwIAD1wAIVN-FX1_fUAAEN1NARMADQAQfQ0AHwYGASUGUQAE
EgEPBQEtAKkAA1YAIx69BAAEAgAv-QiuASsInAAPsAAyyvBGDQ8VHbAeHbANDgQATy4N8DZNAB-h
HxUNsA4dDrAtDrAdDg1JAE8OLbA_SwAwIS0ODgAvDR6YACF1DxUNDg2wDgUAET5TAAMEAA9QACAg
PxXXAEEOLbAumQAvLQ4vASkESQAvDh3jAClJPxWwLXgBAwQAD5cAJgaOAA_aACsf8DEA--------
----------------------------------------vFBtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDEwOjQ5OjA5Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNSAxMTozODo1NCJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDA5OjIxOjQxIixtb2RpZmllZD0iMjAyNS0w
Mi0wNSAxMTozODo1NCIscmV2aXNpb249MjY0NV1dbHo0AFsMAABoQAAA-xN7e2JtcD11c2VyZGF0
YSgiaTE2IiwxNiwyNTYsIjAwOWQwAQAmADwAPzlmMAEAJi85ZkAA-zEvZTABACYvOWUAAv94PzMy
MAAC-_sAAQA-MjkwAAL-538zMTAwMjgwQAAmDwEAIQA8AAD-AaNkODAwZDQwMGQzCAAMEAAIGAAI
MAAACAASZAwAAIcCI2RiEAAXMBAAF2MYAARMABcwVAATOSQAW2EwMGMxEAATMAQACBgAGmIIAC9j
OAQALFI5MDBjYZQAI2NiEAAeORgADygABSdkNQwBFzQQAA4YAA8QAAMIFAAPCAAhCAwADwgAICNl
MQQAFzMMAAQEAB4yDAAPBAAaD1QAAQtMAG9hZDAwYWUIABAPFAABF2QkAgBUAhMx3AAWMhQADwQA
FSdkMcgCCHwCD0AAFQSgAg88ABwvZWEEACsESAAQYgQAD-gAIABEABBmiAGHNjAwYTcwMGYUAA8M
ABFnYzQwMGZiQAAAHAMSYwgAAQwAFzUMAAMsAAgkAC9jNUAAABJkCAANTAAeZFgAAYgAFzlAABY4
FAAPDAARBMgABUAADugADwABCwOUAAVAAAzoAB81zAALL2NjQAAAHjUoAA1YAB80AAEzBDwCImFm
BAAuYjFIAhBlGAMXNQQAHjYcAA8EAArAYzAwYjMwMGI0MDBiEAAWZUgAABwAEGXQAxI1BAArZWQE
ABNmQABAYjAwYggAE2RAABNmCAADQAAFLAADCAArYjZAABM2DAAfZkAAAwQgAAWoAAOsACtiNiQA
E2Q4ABpkQAAiYTU8ACplYgQAI2I1JAATZjQABHgAH2ZAAAAHOAAFQAAfZEAABBpkQAAEoAAFKAEE
LAEbZkAAH2RAAAAIHAAXZuwABBgAGmMcAA1AAAPAACZhNQwAD0AAAS9hNUAAEydlZgwAB0AAL2Vk
QAAHDgQAD4AAGwUsAAwMAA9AABQmYTUgAAgMAAhAAAVcAA9AABwQZuwDFzUEAB42QAAPvAAGH2Qg
AAEPgAAYAIwBEzQYAAgIABdmQAAaZjQACAwAARAAH2MIAAMIgAAFBAAIoAAPEAANHmUcAQ8EABpA
NjAwZoAAEjcEACJmZAgAJmEzDAAEGAAnZmYEAAMcACZmZagDJ2EzDAAXYgwAUmEwMGE5IAAJJAAS
OBgADjQADwQAAxRhBAADRAAEWAAvZWIEABsXYQwADwQAcgTICAB0Bhoz9AsvYzAEAAADKAAFOAAD
yAsEUAAvYzgEAAsNKAAfOQQABwUsAB85BAAIBJgAD6wACAUQAB8w4AAEHzFAABgfMTQADB4xQAAP
MAAJL2VhBAAHBEAAL2VhBAAIH2IEACsiZjMEAAgQAAwcAypmM-ACBAwALmYzMAAEFAAmZWIEAAQg
AC5mM0AAKmFhHAAIFAAvZWJAAAMIKAAvZjMYAAMvYTkUAAcEDAAuZjMcAAQUAC9lYsAACAcQAAwc
AAxsAA9AAAEmZWI8ACpmMxgADywABQgQAARgACZmM0gAImE5HAAMLAAMMAAMZAAPQAABJmFhEAAE
FAAmZjMQACZlYjgAL2ViBAAsH2EAAxciZjIkDiZmYRQAD3AOBSZhMkAAJ2EyJA4aZDQAK2QzRAAf
MUAABy5jMWgOL2RieA4AHzFAAAAPAAQEBMwMDAQAJmYxQAAPJAAJI2ZiTAATNAgAFjDUDAVAAAQk
ABdkCAADJAAE8AwEOAABCAAfNUAAAAtgACJjMBgABMwMDZwAFzlAAA8kAAgPAAEyCJwAFjScAAVA
ABNiHAAIBAESNBgABRwAFzUgAA8AAQEIJAEDDAAPAAExL2MwBAAIA0AALmMwBAAPAA4KHjZAAA8o
AAUEQAoJ3AkeZUAADygABS5lY3QKD0AABggoABpmQAAJBAAPQAAIDCgAK2VjlAAfZkAACAgkAAxA
AAsYAA9AAAIfZEAADB9kQAAUH2RAAAAEVAAPQAANF2YIAARAAAQUAAcYAA9AAAIIKAAXZEAAD8AB
LQhYAB9mQAALDCgAK2VjFAAfZEAADAQkAA_ADAkPAAMAL2Y0gAwHImZmUAwjZTdgDA6AAA8oAAsA
xBFIODAwYgQGC0AADygAAw8ABRMFYBQeMSASAZwEHjAEACtmYkAAAHgAEzkEAAiAAA-ABBAvYzAE
AAcvYjEEAAQWMkAACbwADAQAHzkEAAQXYUAACLwADAQAGzAUARMxCAAWMEAABRAAHjAkAC5iOBQB
KmIwwAANWAAPUAAIBVQAH2GAAAgHBAAOFBgPCAAcCAwADwgAIQgMAA8IACEIDAAPCAAhDxQAAR8z
CAAEHzgIAAALFAAN_BoMABsLMAANPAAfYVQCAwk8Chc4CAAPPAAAJmFmBAArYjIcGRs4CAAIDAAS
MjwCCUAAA5gCD4AADQxEAAzUAi9kMQABFw2wCg8AARAIgAAiYzBEABdhDAAPAAESB0QAEGE4AB8x
vAAMHzgUAAQLRAAPvAAGGzQMAB84JBwEHzUgAAQbOAwADwgAICtjMGwBCAQAD0AEEC9lYSANBwRA
AC9lYQQAByZjMAQAI2Q5MAMfYYAAByZkMWABBBQAD8QAAh4xQAAOZAAPBAAMDEAADGQAHjCQHA8I
AB0vYzAEAE8PNAEGC9gADygABQ80ARUOKAAONAENEAAOBAAPLAAbAGwJEzcIAB82EAAEDBQACAwA
AEQJE2YIAB9lEAAEH2UgAAcvZTkEACsAcAEvZTgIACgDDAAPAAQqDmwBD4wBGwhIABswzA4fMAQA
AQ9sACMOyAIPBAAYH2PIAhAEuAAPjAAJA3wQL2MwpAAoHzEYAAcJpAAbYzAADKAAG2QgAA8EACAJ
pAgEeAAPVAAABZgACzAAL2M4BAAsBFgjGjRYIwkEAAwgAAcQACtkNaQJGjWEBgSUBgX4Ahs1EAAI
DAALiAgvYzS8BwwfOBQAABszAAIPAAgZGzOAAAxUAh84CAAAD7wABQN8ACtjMIAAGjMwAA94AAkI
BAAnZDn4AQhMAA54AA8EAA4JkAAESAALNAEvYzBQAwQbY5AAD7wACC9kMRwADw0gAAdkAwVkAA88
AAUeM7wADwQACg_QAQEIjAEfMjQABw_AAAYeOEQADzQAChc1PAATNAQAHzgIACgbOFAADAgAHzgI
AAwONAAOCAAfOAgACBc4xAEfYqQCBAgIABs4CAAIAAIHOAEvZDlMAAgIRAAfM7wBCBIwVAAvZDlE
AAgIgAAXMAQAHzHwAQQIPAAXOBQAHzWIAAcPgAACBAgACzQABWwAHjKIACdjNBQABIgDGmM8ASdk
ORQAHzAEAAcFaAAIbAAIYAAHjAMJlAAMaAAbOEQADwQAAA2UABtkgAAPRAABD7wIARtjkAAXODwA
C0QAKmQxtAANgAMEMAAIDAAeOCQADxAAAggIAAgMAA8IACAnYzAEAAR4AQ8QAAUPGAABHzgEACwf
OQQAKy9lYQQACxtmlA4MBAAF7AEP7AABHzU8AgAeMBADDwQAGg5sAA4EAAdgAwgEAAlUAgekAA4s
AA_oAAMPzAABJmQwDAQPiAQCCHgAHzgIAAAEJAUEWAAbZMgAD4AEARMwPAAEKAAPBAAJHzVEAAQD
CAAvYzCMAQADeAAMBAArZDmwABNiHAAMQAEITAAA5BAWNLAaAQwBGzCEAQ8EAAwFPBgXZYQAA2gB
L2VhBAAPATwYFjdYGAicEg8EAAYHIAAjZmM0GAcwGA8EAD4fMUABBwlEAhs1CAAfNEwBEwkAAhc4
CAAfOFgABBoynAAFgAAbOAgADhQADggDD4AAEQ88AAgvY2REAAgPPAAFA-gCCAQAD8QAAgcMAw9M
AQkFPAALMAAvZTEEADAfMjQAOA9MABYPkDAlDwQAlB8yHAAJD9QANw8UAgIaMCQFBQgAH2QwAAAM
JAAXY8QCCBQEBAADCzAABBwADzAAAQ4UAA8QAAAfNugTCA8UABEP8BMJH2YMAAQHBAAjZDYEABc3
DAAMBAAfNyQABy9lYgQAAyZkZgwADhwADzAABQ8EAB8NUAQPCAAdDxQAAR8wGAAYHjQkAA8sAAYP
KAABDxQAAR80GAAUHzQkABQPIAAJDzwAEQ9EAAkEFAAPCAAFHzQIAAQEIAAIDAAfNDQAFAUYAPEU
IiksaGlkZGVuPWZhbHNlLG5hbWU9Im1hcCIscGFuX3g9MjgJAPIBeT0xNzUwLHRpbGVfaD0xNgoA
EHcKAIB6b29tPTF9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTI3IDAyOjAyOjA0Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNSAxMTozODo1NCJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAwOjUxOjM1Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNSAxMTozODo1NCIscmV2aXNpb249MjE0N11dbHo0AKAAAAALCgAA-zBweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDQA8PkAQFBgdADJAICQoLQAyQDwwPDQ8ODEAM8P8BAOv-J6oB
EAYPIBABIAEgAfAAAhACDhABIA8hIAEwD0Dwww8oD--wxg-4Cg--D4AP9w8NAfAJARAGDjAA----
--_9H-8BAKzPyA9AAA8QQP--sPD-AQD-6lD-----KQ==
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAxOjQ4OjI1Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNSAxMTozODo1NCJdXQ==
:: draw.lua
--[[pod_format="raw",created="2024-11-08 00:54:54",modified="2025-02-05 11:38:54",revision=2804]]
function draw_map()
	cls(1)
	
	if mapfocus == "map" then
		draw_menu()
	end
	
	for i = 1, #mapsegs do
		local seg = {
			x = 0,
			y = 248 - ((mapsegs[i] - 1) * 8),
			o = 128 * i,
		}
		
		map(seg.x, seg.y, mapoffset, mapscroll - seg.o, 16, 8)
	end
	
	for sched in all(data) do
		-- x coordinates are +/- 8 to center
		-- y coordinates need to account for mapscroll, the offset for the editor (376),
		--		the ingame mapscroll they're scheduled to appear (sched[1]),
		--		and the coordinates they're supposed to spawn at at that scroll (sched[4])
		local schx = sched[3]
		local schy = mapscroll - 378 - sched[1] + sched[4]
		local en = enlib[sched[2]]
		local ani = anilib[en[1]]
		
		mspr(cyc(_t, ani, en[2]), schx, schy)
	end
	
	-- timeline
	for i = 0, 29 do
		local iscr = mapscroll - 384 + (13 - i)
		local ens = spawnlist(iscr)
		if i == 13 or iscr % 5 == 0 then
			local col = i == 13 and 14 or 7
			print(padString(iscr, 4, " ") .. " - ", mapoffset - 29, i * 9, col)
		end
		
		col = 7
		
		if #ens > 0 then
			print("spawn - " .. padString(iscr, 4, " ") .. " - ", mapoffset - 70, i * 9, col)
		end
		
		if iscr < 0 then
			break
		end
	end
	
	if mapfocus == "menu" then
		draw_menu()
		rect(480 - mapoffset, 0, 479, 269, 7)
	end
	debug[1] = "x: " .. mouse_map_x
	debug[2] = "y: " .. mouse_map_y
--	debug[3] = "scroll: " .. mapscroll - 384
--	end
end

function draw_table()
	cls(1)
	debug[1] = ""
	debug[2] = ""
	debug[3] = ""
	
	draw_menu()
--	if menu then
--		for _i = 1, #menu do
--			for _j = 1, #menu[_i] do
--				-- change color if cell is currently selected
--				local _c = menu[_i][_j].c or 22
--				if _i == cury and _j == curx then
--					_c = 7
--				end
--				
--				-- make copy of local cell we're working with
--				local mymenu = menu[_i][_j]
--				
--				-- print cell
--				bgprint(mymenu.w, mymenu.x, mymenu.y, _c) --*****
--				print(mymenu.text, mymenu.x, 1+mymenu.y, _c)
--				if _i == cury and _j == curx then
--					rect(mymenu.x-2, mymenu.y-2, mymenu.x+(#mymenu.w * 5), mymenu.y+11, _c)
--				end
--			end
--		end
--	end
--	debug[1] = #mapsegs -- outputs as 52 which is the # of segments...
end

function draw_menu()
	if menu then
		for _i = 1, #menu do
			for _j = 1, #menu[_i] do
				-- change color if cell is currently selected
				local _c = menu[_i][_j].c or 22
				if _i == cury and _j == curx then
					_c = 7
				end
				
				-- make copy of local cell we're working with
				local mymenu = menu[_i][_j]
				
				-- print cell
				bgprint(mymenu.w, mymenu.x, mymenu.y, _c) --*****
				print(mymenu.text, mymenu.x, 1+mymenu.y, _c)
				if _i == cury and _j == curx then
					rect(mymenu.x-2, mymenu.y-2, mymenu.x+(#mymenu.w * 5), mymenu.y+11, _c)
				end
			end
		end
	end
end

function refresh_map()
	menu = {}
	local title = {}
	local curpos = mapscroll - 384
	add(title, {
--		txt = padString(mapscroll, 4, " "),
		text = "enemy list",
		w = "          ",
		cmd = "",
		x = 480 - mapoffset + 2,
		y = 2,
		c = 6,
	})
	add(title, {
		text = "pos: " .. padString(curpos, 4, " "),
		w = "         ",
		cmd = "",
		x = 480 - mapoffset + 3 + 63,
		y = 2,
		c = 6,
	})
	add(menu,title)
	
	local ens = spawnlist(curpos)
	local numens = (#ens) and #ens or 0
	if #ens > 0 then
		local list = {}
		for i = 1, #ens do
			add(list, {
				text = padString(ens[i][2], 2, "0"),
				w = "  ",
				cmd = "",
				x = 480 - mapoffset + 4,
				y = 3 + (13 * i),
				c = 7,
			})
		end
		add(menu,list)
	end
	add(menu,{{
		text = " + ",
		cmd = "",
		x = 480 - mapoffset + 4,
		y = 3 + (13 * (numens + 1)),
		w = "   ",
		c = 7,
--		key = "",
--		cmdx = j,
--		cmdy = i,
	}})
end

function refresh_table()
	menu = {}
	for i = 1, #data do
		local row = {}
		add(row, {
				text = i,
				cmd = "",
				x = 2,
				y = -11 + 13 * i,
				w = "   ",
				c = 18,
			})
		for j = 1, #data[i] do
			add(row, {
				text = data[i][j],
				cmd = "edit",
				cmdx = j,
				cmdy = i,
				x = -43 + 32 * (j + 1),
				y = -11 + 13 * i,
				w = "      ",
			})
		end
		if cury == i then
			add(row, {
				text = " + ",
				cmd = "newcell",
				cmdy = i,
				x = -43 + 32 * (#data[i] + 2),
				y = -11 + 13 * i,
				w = "   ",
			})
		end
		add(menu, row)
	end
	add(menu,{{
		text = " + ",
		key = "_add",
		x = 2,
		y = -11 + 13 * (#data + 1),
		w = "   ",
		cmd = "newline",
		cmdx = j,
		cmdy = i,
	}})
end
:: input.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAzOjQ5OjI4Iixtb2RpZmllZD0iMjAyNC0x
MS0wOCAwNDowNjozOCIscmV2aXNpb249MV1dbHo0ABcAAAAVAAAA8AZ7ezAsMSwyLDN9LHs0LDUs
Niw3fX0=
:: io.lua
--[[pod_format="raw",created="2024-11-08 01:03:28",modified="2025-02-05 11:38:54",revision=2278]]
-- warning, export overwrites all of output_file every time it's used!
-- can store everything directly as variables, a lot of interesting uses i can think of

function export()
	store(output_file,data)
	add(msg,{text="Exported!",t=120})
end


:: main.lua
--[[pod_format="raw",created="2024-11-08 00:51:35",modified="2025-02-05 11:38:54",revision=2464]]
include("draw.lua")
include("update.lua")
include("tools.lua")
include("io.lua")

function _init()
	modify_text_display = create_gui()
	
--	window{width = 460, height = 240}
	
	input_file = "/shmup/sched.pod"
	output_file = "/shmup/sched.pod"
	data = fetch(input_file)
	
	mapsegs = fetch("/shmup/mapsegs.pod")
	myspr = fetch("/shmup/myspr.pod")
	anilib = fetch("/shmup/anilib.pod")
	enlib = fetch("/shmup/enlib.pod")
	
	debug = {}
	msg = {}
	_drw = draw_map
	_upd = update_map
	menuitem(1, "export", export)
	
	curx = 1
	cury = 2
	scrolly = 0
	scrollx = 0
	scrollspeed = 4
	
	mapscroll = 398
	mapoffset = 112
	
	defaultmapfocus = "map"
	mapfocus = "map"
	
	-- trying to speed up the editor by limiting what we render
	-- turns out we were doing too much work per map segment rendered lol
	-- keeping this here just in case though
--	cursegs = {}
	
	_t = 0
end

function _draw()
	_drw()
	
	if current_page == "edit" then
		modify_text_display:draw_all()
	elseif current_page == "newline" then
		modify_text_display:draw_all()
	end
	
	if #msg > 0 then
		bgprint(msg[1].text,100-(#msg[1].text*2.5),97,14)
		msg[1].t = msg[1].t - 1
		if msg[1].t <= 0 then
			deli(msg,1)
		end
	end
	
	-- debug --
	cursor(4, 4)
	color(8)
	for txt in all(debug) do
		print(txt)
	end
end

function _update()
	_upd()
	modify_text_display:update_all()
	
	_t += 1
end

:: myspr.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTIwIDIyOjE5OjIyIixtb2RpZmllZD0iMjAyNC0x
MS0yMyAwMjo0Mjo1MSIscmV2aXNpb249NF1dbHo0AAEBAABuAQAA8AV7ezgsMTUsMTgsNSw4fSx7
OSwxNg4AETcOACAxMAwAQjE4LDgPABoxHgATMjsAAh4AQDI0LDggADAzLDAOADA1LDYOABIyDgAw
Niw0DgASMQ4AIDcsWgBQMCw1LDkPACA4LEsAEDQxABAzEAAQOQ0AwTEzLDcsMTJ9LHszMDsAAV8A
ACAAQDE3LDFKAAFMAGMxOCwzLDNZAGMxOSwzLDYNAGQyMCwzLDgNABcxDQAhMzJRABM2uQAgMzPF
AEIxNyw5DwAZNA8AUDEsNyw3ZAAARgAHDAAAaQATN_0AEDTNAEA5LDUsrwARNV0AgTIsOCw1fSx7
CwCAMTIsNiw2fX0=
:: out.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDA0OjAxOjE4Iixtb2RpZmllZD0iMjAyNC0x
MS0yMSAwMjoyNTozNCIscmV2aXNpb249M11dbHo0ABMBAAB-AQAA8AV7ezgsMTUsMTgsNSw4fSx7
OSwxNg4AETcOACAxMAwAQjE4LDgPABoxHgATMjsAAh4AQDI0LDggADAzLDAOADA1LDYOABIyDgAw
Niw0DgASMQ4AIDcsWgBQMCw1LDkPACA4LEsAEDQxABAzEAAQOQ0AwTEzLDcsMTJ9LHszMDsAAV8A
ACAAQDE3LDFKAAFMAGMxOCwzLDNZAGMxOSwzLDYNAGQyMCwzLDgNABcxDQAhMzJRABM2uQAgMzPF
AEIxNyw5DwAZNA8AUDEsNyw3ZAAARgAHDAAAaQATN_0AEDTNAEA5LDUsrwARNV0AgTIsOCw1fSx7
CwDwCjEyLDYsNn0seyI1MCIsIjEiLDAsMCwwfX0=
:: test.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAzOjI1OjQ0Iixtb2RpZmllZD0iMjAyNC0x
MS0wOCAwMzo1MDo0MCIscmV2aXNpb249MTddXWx6NAAJAAAACAAAAIB7Nyw4LDEwfQ==
:: test.txt
--[[pod_format="raw",created="2024-11-08 02:37:45",modified="2024-11-08 02:37:49",revision=2]]
test="useful data"
:: tools.lua
--[[pod_format="raw",created="2024-11-08 00:58:52",modified="2025-02-05 11:38:54",revision=2254]]
function bgprint(txt,x,y,c)
	print("\#0"..txt,x,y,c)
end

function fillBG(self, col)
	rectfill(1,1,self.width-2,self.height-2,col)
end

function fillSELECTED(self, col)
	rectfill(-1,-1,self.width+1,self.height+1,col)
end

function removeAllChildren(el)
	for child in all(el.child) do
		el:detach(child)
	end
end

function dump(o)
   if type(o) == 'table' then
      local s = '{ '
      for k,v in pairs(o) do
         if type(k) ~= 'number' then k = '"'..k..'"' end
         s = s .. '['..k..'] = ' .. dump(v) .. ','
      end
      return s .. '} '
   else
      return tostring(o)
   end
end

function print_table(node)
    local cache, stack, output = {},{},{}
    local depth = 1
    local output_str = "{\n"

    while true do
        local size = 0
        for k,v in pairs(node) do
            size = size + 1
        end

        local cur_index = 1
        for k,v in pairs(node) do
            if (cache[node] == nil) or (cur_index >= cache[node]) then

                if (string.find(output_str,"}",output_str:len())) then
                    output_str = output_str .. ",\n"
                elseif not (string.find(output_str,"\n",output_str:len())) then
                    output_str = output_str .. "\n"
                end

                -- This is necessary for working with HUGE tables otherwise we run out of memory using concat on huge strings
                table.insert(output,output_str)
                output_str = ""

                local key
                if (type(k) == "number" or type(k) == "boolean") then
                    key = "["..tostring(k).."]"
                else
                    key = "['"..tostring(k).."']"
                end

                if (type(v) == "number" or type(v) == "boolean") then
                    output_str = output_str .. string.rep('\t',depth) .. key .. " = "..tostring(v)
                elseif (type(v) == "table") then
                    output_str = output_str .. string.rep('\t',depth) .. key .. " = {\n"
                    table.insert(stack,node)
                    table.insert(stack,v)
                    cache[node] = cur_index+1
                    break
                else
                    output_str = output_str .. string.rep('\t',depth) .. key .. " = '"..tostring(v).."'"
                end

                if (cur_index == size) then
                    output_str = output_str .. "\n" .. string.rep('\t',depth-1) .. "}"
                else
                    output_str = output_str .. ","
                end
            else
                -- close the table
                if (cur_index == size) then
                    output_str = output_str .. "\n" .. string.rep('\t',depth-1) .. "}"
                end
            end

            cur_index = cur_index + 1
        end

        if (size == 0) then
            output_str = output_str .. "\n" .. string.rep('\t',depth-1) .. "}"
        end

        if (#stack > 0) then
            node = stack[#stack]
            stack[#stack] = nil
            depth = cache[node] == nil and depth + 1 or depth - 1
        else
            break
        end
    end

    -- This is necessary for working with HUGE tables otherwise we run out of memory using concat on huge strings
    table.insert(output,output_str)
    output_str = table.concat(output)

    print(output_str)
end

function mspr(si, sx, sy, flip_x, flip_y)
	local ms = myspr[si]
	-- 1:i, 2:w, 3:h, 4:ox, 5:oy, 6:flip_x 7:flip_y
	sspr(ms[1], 0, 0, ms[2], ms[3], sx - ms[4], sy - ms[5], ms[2], ms[3], ms.flip_x or flip_x, ms.flip_y or flip_y)
	if ms.nextspr then
		mspr(ms.nextspr, sx, sy)
	end
end

function cyc(age, arr, anis)
	anis = anis or 1
	return arr[(age\anis) % #arr + 1]
end

function drawobj(obj)
	mspr(cyc(obj.age, obj.ani, obj.anis), obj.x, obj.y)
	if coldebug and obj.col then
		msprc(obj.col, obj.x, obj.y)
	end
end

function mb_state(m, m_prev)
	if not m or not m_prev then return end
	
	mlb = m & 1 > 0
	mrb = m & 2 > 0
	mmb = m & 4 > 0
	
	pmlb = m_prev & 1 > 0
	pmrb = m_prev & 2 > 0
	pmmb = m_prev & 4 > 0
	
	if mlb and pmlb then
		left_mouse = "held"
	elseif mlb and not pmlb then
		left_mouse = "clicked"
	elseif not mlb and pmlb then
		left_mouse = "released"
	elseif not mlb and not pmlb then
		left_mouse = "up"
	end
	
	if mrb and pmrb then
		right_mouse = "held"
	elseif mrb and not pmrb then
		right_mouse = "clicked"
	elseif not mrb and pmrb then
		right_mouse = "released"
	elseif not mrb and not pmrb then
		right_mouse = "up"
	end
	
	if mmb and pmmb then
		middle_mouse = "held"
	elseif mmb and not pmmb then
		middle_mouse = "clicked"
	elseif not mmb and pmmb then
		middle_mouse = "released"
	elseif not mmb and not pmmb then
		middle_mouse = "up"
	end
	
	return left_mouse, right_mouse, middle_mouse
end

function quicksort(t)
	local function qhelp(t, l, r)
		if r - l < 1 then return end
		local p = l
		for i = l + 1, r do
			if t[i][1] < t[p][1] then
				if i == p + 1 then
					t[p], t[p+1] = t[p+1], t[p]
				else
					t[p], t[p+1], t[i] = t[i], t[p], t[p+1]
				end
				p += 1
			end
		end
		qhelp(t, l, p - 1)
		qhelp(t, p + 1, r)
	end
	
	qhelp(t, 1, #t)
end

function padString(v, l, ch)
	local sv = tostr(v)
	
	if #sv < l then
		local diff = l - #sv
		for i = 1, diff do
			sv = ch .. sv
		end
	end
	
	return sv
end

function spawnlist(scr)
	local ret = {}
	for s in all(data) do
		if s[1] == scr then
			add(ret, s)
		end
	end
	return ret
end
:: update.lua
--[[pod_format="raw",created="2024-11-08 00:55:08",modified="2025-02-05 11:38:54",revision=2735]]
function update_map()
	refresh_map()
	wheel_y = ({mouse()})[5]
	
	prev_mouse_b = mouse_b or 0 -- for single clicks
	mouse_x,mouse_y,mouse_b = mouse()
	
	mapscroll += wheel_y*16
	-- need to bind to map coordinates
	-- we'll let ourselves place things up to 50px off screen left & right
	-- map is 256px wide so coordinates in app are 102-358 (screen size is 460px wide)
	mouse_map_x = mid(-50, mouse_x - mapoffset, 306)
	mouse_map_y = mapscroll - mouse_y - 128
	
	if keyp("down") then
		if mapfocus == "map" then
			mapscroll -= 1
		elseif mapfocus == "menu" then
			cury += 1
		end
	end
	
	if keyp("up") then
		if mapfocus == "map" then
			mapscroll += 1
		elseif mapfocus == "menu" then
			cury -= 1
		end
	end
	
	cury = mid(2, cury, #menu)
	
	if keyp("tab") then
		if mapfocus == "map" then
			mapfocus = "menu"
		elseif mapfocus == "menu" then
			mapfocus = "map"
		end
	end
	
	mapscroll = max(14 + 384, mapscroll)
	
	if keyp("t") then
		_drw = draw_table
		_upd = update_table
		refresh_table()	
		curx = 2
		cury = 1
		return
	end
	
	if keyp("s") then
		quicksort(data)
	end
	
	lc = mb_state(mouse_b, prev_mouse_b)
	
	if lc == "clicked" then
		local sch = {}
		
		sch[1] = mouse_map_y - 270
		sch[2] = 1
		sch[3] = mouse_map_x + 102 -- 102 is padding size
		sch[4] = -16
		
		add(data, sch)
	end
end

function update_table()
	refresh_table()
	
	wheel_y = ({mouse()})[5]
	
	--up
	if keyp("up") then
		cury = cury - 1
	end
	--down
	if keyp("down") then
		cury = cury + 1
	end
	cury = (cury-1) % (#menu) + 1
	cury = cury - wheel_y
	cury = mid(1, cury, #menu)
	
	--left
	if keyp("left") then
		curx = curx - 1
	end
	--right
	if keyp("right") then
		curx = curx + 1
	end
	if cury < #menu then
		curx = (curx-2) % (#menu[cury]-1) + 2
	else
		curx = 1
	end
	
	if keyp("s") then
		quicksort(data)
	end
	
	local curmenu = menu[cury][curx]
	
	if curmenu then
		if curmenu.y + scrolly > (200 - 30) then
			scrolly = scrolly - scrollspeed
		end
		if curmenu.y + scrolly < 22 then
			scrolly = scrolly + scrollspeed
		end
		scrolly = min(0, scrolly)
		
		if curmenu.x + scrollx > (200 - 80) then
			scrollx = scrollx - scrollspeed
		end
		if curmenu.x + scrollx < 22 then
			scrollx = scrollx + scrollspeed
		end
		scrollx = min(0, scrollx)
		
		camera(-scrollx,-scrolly)
	end
	
	-- selecting a cell
	if keyp("z") then
		mymenu = menu[cury][curx]
		-- editable cell selected
		if mymenu.cmd == "edit" then
			current_page = "edit"
			text_bar = spawntextbox()
			_upd = upd_type	
			text_bar:set_keyboard_focus(true)
			text_bar:set_text(tostring(mymenu.text))
			mymenu.data = tonum(mymenu.data)
		-- newline cell selected
		elseif mymenu.cmd == "newline" then
			add(data, { 0 })
		elseif mymenu.cmd == "newcell" then
			add(data[mymenu.cmdy],0)
		end
	end
	
	if keyp("m") then
		_drw = draw_map
		_upd = update_map
		mapfocus = defaultmapfocus
		curx = 1
		cury = 2
		refresh_map()
		return
	end
end

function upd_type()
	-- no need to check for input if we're typing
end

function spawntextbox(_i)
	local enter_mode = _i
	local editval
	local text_bar = modify_text_display:attach_text_editor{
		x = mymenu.x+14+scrollx, y = mymenu.y-1+scrolly,
		width = 16,
		height = 12,
		margin_top = 2,
		key_callback = {
			enter = function(enter_mode)
				editval = text_bar:get_text()[1]
				if (editval == "") then
					-- if current x is on the last cell
					if mymenu.cmdx == #data[mymenu.cmdy] then
						if mymenu.cmdx == 1 then
							deli(data, mymenu.cmdy)
						else
							deli(data[mymenu.cmdy],mymenu.cmdx)
						end
					else
						editval = tonum(editval)
						data[cury][curx-1] = (editval) and editval or 0
					end
				else
					if enter_mode == "newline" then
						local _el = {
							text = 0,
							key = editval,
							cmd = "edit",
							cmdx = j,
							cmdy = i,
							x = -30 + 32 * j,
							y = -11 + 13 * i,
							w = "      "
						}
						add(data,{_el})
					else
						editval = tonum(editval)
						data[cury][curx-1] = (editval) and editval or 0
					end
				end
				removeAllChildren(modify_text_display)
				current_page = nil
				_upd = update_table
			end
		}
	}
	return text_bar
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAxOjQ4OjI1Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNSAxMTozODo1NCIscnVudGltZT0xMSx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzMzIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJkcmF3Lmx1YSMxNTgiLHdvcmtzcGFj
ZV9pbmRleD0xfSx7bG9jYXRpb249InVwZGF0ZS5sdWEjMTkiLHdvcmtzcGFjZV9pbmRleD0xfSx7
bG9jYXRpb249InRvb2xzLmx1YSMyMTEiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249Imlv
Lmx1YSMxIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJnZngvMC5nZngiLHdvcmtzcGFj
ZV9pbmRleD0yfSx7bG9jYXRpb249Im1hcC8wLm1hcCIsd29ya3NwYWNlX2luZGV4PTN9LHtsb2Nh
dGlvbj0ic2Z4LzAuc2Z4Iix3b3Jrc3BhY2VfaW5kZXg9NH19XV0=
:: [eoc]
