picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTA2IDE5OjIzOjQ1Iixtb2RpZmllZD0iMjAyNC0x
MC0xMyAyMDo0MTo0NyJdXQ==
:: 0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTA2IDE5OjIzOjQ1Iixtb2RpZmllZD0iMjAyNC0x
MC0xMyAyMDo0MTo0NyIscmV2aXNpb249NzQyXV1sejQAfgAAABIxAADzIXtbMF09e2JtcD1weHUA
QyAQEATwVgcQB8AX0BfABxAH8FYsZmxhZ3M9MCxwYW5feAgAy3k9MCx6b29tPTh9LD4AH-AxAP--
-------------------------------------------------------------9dQbT04fX0=
:: blob.lua
--[[pod_format="raw",created="2024-10-06 05:10:33",modified="2024-10-13 20:41:47",revision=1002]]
include "dither.lua"

function blob(p)
	local flr_r = flr(p.r)
	local _r = {
		0,
		flr_r * 0.05,
		flr_r * 0.15,
		flr_r * 0.30
	}
	
--	local pat = { -- we can also use dither_mask(value) values instead
--		0b0000000000000000,
--		0b0001101001011010,
--		0b0111111111111111,
--		0b1111111111111111
--	}

	local pat = {
		dither_mask(1),
		dither_mask(9/16),
		dither_mask(1/16),
		dither_mask(0)
	}

	if flr_r <= 5 then
		deli(_r,4)
		deli(_r,2)
		deli(pat,2)
		deli(pat,2)
--	elseif flr_r <= 6 then
--		deli(_r,3)
--		deli(pat,3)
	elseif flr_r <= 8 then
		deli(_r,4)
		deli(pat,3)
		pat[2]=0b1001001001001001	
	elseif flr_r >= 12 then
--		deli(_r,4)
--		deli(pat,3)
--		pat[2]=0b1001001001001001
		_r[2] = flr_r * 0.02
		_r[3] = flr_r * 0.08
		_r[4] = flr_r * 0.12
	end
--	fillp(dither_mask(3/8))
--	fillp(0b0001101001011010)
--	circfill(p.x-2,p.y+2, flr_r, 0x1814) -- adds dark outline
--	circfill(p.x-1,p.y+1, flr_r, 21) -- adds dark outline
	for i = 1, #_r do
--		poke(0x550b,0x3f) -- set black to transparent
--		palt()            -- recommended but what is this doing?
--		fillp(dither_mask(i/#_r))
		fillp(pat[i])
		circfill(p.x, p.y-_r[i], flr_r-_r[i], p.c)
--		poke(0x550b,0x00) -- set back to black
	end
	
	fillp()
	if flr_r == 1 then
		pset(p.x, p.y, p.c)
	elseif flr_r == 2 then
		rectfill(p.x-1, p.y-1, p.x+1, p.y+1, p.c)
	end
end


:: dither.lua
--[[pod_format="raw",created="2024-10-06 20:57:04",modified="2024-10-13 20:41:47",revision=676]]
local threshold_map = {
	0, 8, 2, 10,
	12, 4, 14, 6,
	3, 11, 1, 9,
	15, 7, 13, 5,
}

local function make_mask(value)
	local mask = 0
	for i = 1, 16 do
		mask = mask * 2
		if threshold_map[i] >= value then
			mask += 1
		end
	end
	return mask
end

local dither_masks = {}

for i = 0, 16 do
	dither_masks[i] = make_mask(i)
end

-- value 0-1
function dither_mask(value)
	return dither_masks[mid(0, flr(value * 16 + 0.5), 16)]
end
:: explode.lua
--[[pod_format="raw",created="2024-10-07 01:29:38",modified="2024-10-13 20:41:47",revision=631]]
function explode(ex, ey)
	add(parts, {
		draw = blob,
		x = ex,
		y = ey,
		r = 17,
		maxage = 2,
		c = 0x0707,
		ctab = {0x0707,0x070a},
	})
	
	sparkblast(ex, ey, 2)
	sparkblast(ex, ey, 15)
	
	grape(ex, ey, 2, 13, 1, "return", 
		{0x070a,0x070a,0x070a,0x0a09},
		0)
	grape(ex+rnd(5)-2.5, ey - 5, 10, 20, 1, "return", 
		{0x070a,0x0a09,0x090a},
		-0.2)
	grape(ex+rnd(5)-2.5, ey - 10, 25, 25, .2, "fade", 
		{0x070a,0x070a,0x0a09,0x090a,0x0d08,0x0d05},
		-0.3)
end

function dopart(p)
	-- [ ] age function
	-- [ ] max age counter

	if p.wait then
		-- wait countdown
		p.wait -= 1
		if p.wait <= 0 then
			p.wait = nil
			if p.c == nil and p.ctab then
				p.c = p.ctab[1]
			end
		end
	else
		-- particle logic
		p.age = p.age or 0
		if p.age == 0 then
			p.ox = p.x
			p.oy = p.y
			p.r = p.r or 1
			p.ctabv = p.ctabv or 0
		end
		
		p.age += 1
		-- animate color
		if p.ctab then
			local life = (p.age + p.ctabv) / p.maxage
			local i = mid(1, flr(1 + life * #p.ctab), #p.ctab)
			p.c = p.ctab[i]
		end

		-- movement
		if p.to_x then
			p.x += (p.to_x - p.x) / (4 / p.spd)
			p.y += (p.to_y - p.y) / (4 / p.spd)
		end
		
		if p.sx then
			p.x += p.sx
			p.y += p.sy
			if p.to_x then
				p.to_x += p.sx
				p.to_y += p.sy
			end
			if p.drag then
				p.sx *= p.drag
				p.sy *= p.drag
			end
		end
		
		-- size
		if p.to_r then
			p.r += (p.to_r - p.r) / (5 / p.spd)
		end
		
		if p.sr then
			p.r += p.sr
		end
		
	
		if p.age >= p.maxage or p.r < 0.5 then
	      if p.onend == "return" then
	        p.maxage += 32000
	        p.to_x = p.ox
	        p.to_y = p.oy
	        p.to_r = nil
	        p.sr = -0.3
			elseif p.onend == "fade" then
	        p.maxage += 32000
	        p.to_r = nil
	        p.sr = -0.1 - rnd(0.3)
	      else
	        del(parts, p)
	      end
	      p.ctab = nil
	      p.onend = nil
		end
	end
	-- 2 main ways to logic and animate
	-- sx/sy velocity system.  not great control if you want control over the particles final destination
	-- to_x/to_y destination definition
end

function grape(ex, ey, ewait, emaxage, espd, eonend, ectab, edrift)
	local spokes = 6
	local ang = rnd()
	local step = 1 / spokes
	local shakiness = rnd(3) - 1.5

	-- spawn spokes
	for i = 1, spokes do
		local myang = ang + step * i
		local dist = 8 + shakiness
		local dist2 = dist / 2
		local temp_ox = shakiness + ex + sin(myang) * dist2
		local temp_oy = shakiness + ey + cos(myang) * dist2

		add(parts, {
			draw = blob,
			x = temp_ox,
			y = temp_oy,
			ox = temp_ox,
			oy = temp_oy,
			r = 3,
			to_r = rndrange(3,7),
			to_x = shakiness + ex + sin(myang) * dist,
			to_y = shakiness + ey + cos(myang) * dist,
			sx = 0,
			sy = edrift,
			spd = espd or 1,
			wait = ewait,
			maxage = emaxage,
    		onend = eonend,
    		c = ectab[1],
    		ctab = ectab,
    		ctabv = rnd(4),
		})
	end
	-- spawn center
	add(parts, {
		draw = blob,
		x = shakiness + ex,
		y = shakiness + ey - 2,
		r = 3,
		to_r = rndrange(6,9),
		sx = 0,
		sy = edrift,
		spd = espd or 1,
		wait = ewait,
		maxage = emaxage,
    	onend = eonend,
    	c = ectab[1],
   		ctab = ectab,
	})
end

:: main.lua
--[[pod_format="raw",created="2024-10-06 04:41:06",modified="2024-10-13 20:41:47",revision=929]]
-- [x] flash / contrast flame
-- [ ] fireball
-- [ ] smoke

-- colors for fireball progression
-- white/white 		0x0707		119
-- white/yellow 		0x070a		167
-- yellow/orange 	0x0a09		154
-- orange/yellow 	0x090a		169
-- pgrey/red 		0x0d08		141
-- pgrey/dark grey 0x0d05		93

-- [ ] billowing (fire and smoke)
-- [ ] going up
-- [ ] smoke dissipates
-- [ ] sparks

include "blob.lua"
include "explode.lua"
include "spark.lua"

function _init()
	parts = {}
	slowmo = false
	
	t = 0
end

function _draw()
	cls(12)
	for p in all(parts) do
		if p.wait == nil then
			p.draw(p)
		end
	end
--	print(myblb.r, 236, 250, 7)
--	print(dither_mask(1.1/16), 2, 2, 7)
	print(t, 2, 2, 7)
end

function _update()
	if btnp(4) then
		slowmo = false
		explode(240+rnd(20)-10,135+rnd(20)-10)
	end
	if btnp(5) then
		slowmo = true
		explode(240,135)
		t = 0
	end
	
	if slowmo == false or btnp(1) then
		t+=1
		for p in all(parts) do
			dopart(p)
		end
	end
end

function rndrange(low, high)
	return flr(rnd(high + 1 - low) + low)
end
:: spark.lua
--[[pod_format="raw",created="2024-10-13 19:34:29",modified="2024-10-13 20:41:47",revision=173]]
function spark(p)
	-- pset(p.x, p.y, 8)
	line(p.x, p.y, p.x - p.sx * 2, p.y - p.sy * 2, 7)
	line(p.x+1, p.y, p.x - p.sx * 2 + 1, p.y - p.sy * 2, p.c)
end

function sparkblast(ex, ey, ewait)
	local ang = rnd()	
	for i = 1,6 do
		local ang2 = ang+rnd(0.5)
		local spd = rndrange(4,8)
		add(parts, {
			draw = spark,
			x = ex,
			y = ey,
			sx = sin(ang2)*spd,
			sy = cos(ang2)*spd,
			drag = 0.8,
			wait = ewait,
			maxage = rndrange(8,20),
			c = 10,
			ctab = {7, 10},
		})
	end
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTA2IDA0OjM5OjU4Iixtb2RpZmllZD0iMjAyNC0x
MC0xMyAyMDo0MTo0NyIscnVudGltZT0xMSx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzYwIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJleHBsb2RlLmx1YSMxMTMiLHdvcmtz
cGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImJsb2IubHVhIzYzIix3b3Jrc3BhY2VfaW5kZXg9MX0s
e2xvY2F0aW9uPSJkaXRoZXIubHVhIzUiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249InNw
YXJrLmx1YSMyMiIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iMC5nZngiLHdvcmtzcGFj
ZV9pbmRleD0yfX1dXQ==
:: [eoc]
