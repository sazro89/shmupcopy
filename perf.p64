picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDAyOjUyOjQ5Iixtb2RpZmllZD0iMjAyNC0w
OS0yMiAwOToxMTowMSIscmV2aXNpb249MTk5XV1sejQAIgEAAKExAADzIXtbMF09e2JtcD1weHUA
QyAQEATwVgcQB8AX0BfABxAH8FYsZmxhZ3M9MCxwYW5feAgAx3k9MCx6b29tPTh9LD4A8AcICAQQ
MSABDA8cBwwBAAEcBw4cEQwOBgBQHA4HDgwGAM8cAQABDAcODAEgMRBbABnvBAQEABwADBccFwwA
HAA6ABnwHQ4LBCAqECpACg4IAhoOCAIKIAoOKAIPFygCCgAKDTgCDjgCGg2YDxgaDpgMBABACgAK
iCUAv2gCCkAaKAIacDpAbwAZXwIDBF8eMQAZnxAQBPIB7xUC7gIABw9PABwv8PAxAP----------
----------------------------------------------------4VBtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDAyOjU0OjAzIixtb2RpZmllZD0iMjAyNC0w
OS0yMiAwOToxMTowMSJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDAyOjUyOjQ5Iixtb2RpZmllZD0iMjAyNC0w
OS0yMiAwOToxMTowMSIscmV2aXNpb249MTkyXV1sejQAawAAAFgQAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDMyAwBfIjAwMDUEAP--------------------jxCCIpLGhpZGRlbj1mYWxzZSxwYW5f
eD0wCADSeT0wLHRpbGVfaD0xNgoAEHcKAIB6b29tPTF9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDAyOjU0OjAzIixtb2RpZmllZD0iMjAyNC0w
OS0yMiAwOToxMTowMSJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDAyOjUyOjUwIixtb2RpZmllZD0iMjAyNC0w
OS0yMiAwOToxMTowMSIscmV2aXNpb249MTg4XV1sejQAoAAAAAsKAAD-MHB4dQADKAAABAAED0AQ
Ag4AAaABIAKgDgAPEAAN8MoBAgNADw_QBAUGB0AMkAgJCgtADJAPDA8NDw4MQAzw-wEA6-8nqgEQ
Bg8gEAEgASAB8AACEAIOEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYOMAD-----
-70f-wEArM-ID0AADxBA--_w8P8BAP-qUP----8p
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDAyOjU0OjAzIixtb2RpZmllZD0iMjAyNC0w
OS0yMiAwOToxMTowMSJdXQ==
:: main.lua
--[[pod_format="raw",created="2024-09-22 02:52:49",modified="2024-09-22 09:11:01",revision=268]]
include("profiler.lua")

-- can handle about 2000 8x8 bullets and hold 60fps with map calls and no moving
-- can handle about 3000 4x4 bullets and hold 60fps with map calls and no moving
-- updating position of 1500 objects is about 50% cpu hit
function _init()
	profile.enabled(true,true)
	player={
		x=240,
		y=200
	}
	buls={}
	for i=1,1250 do
		local mybul={
			x=rnd(480),
			y=rnd(286)-8
		}
		add(buls,mybul)
	end
end

function _draw()
	profile("_draw")
	map()
	
	for bul in all(buls) do
		spr(1,bul.x,bul.y)	
	end
	spr(3,player.x,player.y)
	spr(4,player.x+6,player.y+4)
	profile.draw()
	print("fps: " .. stat(7),1,29,7)
	profile("_draw")
end

function _update()
	profile("_update")
	for bul in all(buls) do
		if (bul.y < 269) bul.y+=0.5
	end
	if (btn(0)) player.x-=1
	if (btn(1)) player.x+=1
	if (btn(2)) player.y-=1
	if (btn(3)) player.y+=1
	
	profile("_update")
end
:: profiler.lua
--[[pod_format="raw",created="2024-09-22 03:03:01",modified="2024-09-22 09:11:01",revision=185]]
-- abledbody's profiler v1.1

local function do_nothing() end

-- The metatable here is to make profile() possible.
-- Why use a table at all? Because otherwise lua will try to cache the function call,
-- which by default is do_nothing.
local profile_meta = {__call = do_nothing}
profile = {draw = do_nothing}
setmetatable(profile,profile_meta)

local running = {} -- All incomplete profiles
 -- All complete profiles. Note that if the profiles haven't been drawn yet, it will
 -- not be cleared, and further profiles of the same name will add to the usage metric.
local profiles = {}
-- All completed lingering profiles. These are never automatically cleared.
local lingers = {}

-- start_profile, stop_profile, and stop_linger are all internal functions,
-- serving as paths for _profile to take. Lingers share start_profile.
local function start_profile(name,linger)
	local source = profiles[name]
	running[name] = {
		linger = linger,
	}
	local active = running[name]
	active.start = stat(1) --Delaying CPU usage grab until the last possible second.
end

local function stop_profile(name,active,delta)
	local profile = profiles[name]
	if profile then
		profile.time = delta+profile.time
	else
		profiles[name] = {
			time = delta,
			name = name,
		}
		add(profiles,profiles[name])
	end
end

local function stop_linger(name,active,delta)
	local profile = lingers[name]
	if profile then
		profile.time = profile.this_frame and delta+profile.time or delta
		profile.this_frame = true
	else
		lingers[name] = {
			time = delta,
			this_frame = true,
		}
	end
end

-- The main functionality lives here.
-- Takes in the name of what you're profiling, and whether or not to
-- make the profile linger.
local function _profile(_,name,linger)
	local t = stat(1)
	local active = running[name]
	if active then
		local delta = t-active.start

		if active.linger then stop_linger(name,active,delta)
		else stop_profile(name,active,delta) end

		running[name] = nil
	else
		start_profile(name,linger)
	end
end

-- Clears all lingering profiles.
function profile.clear_lingers()
	lingers = {}
end

local function draw_cpu()
	print("cpu:"..string.sub(stat(1)*100,1,5).."%",1,1,7)
end

-- This draws the profiles, and then resets everything for the next frame.
-- If it is not called, usage metrics will accumulate.
-- Lingering profiles are always displayed after persistent profiles.
local function display_profiles()
	local i = 1
	for prof in all(profiles) do
		local usage = string.sub(prof.time*100,1,5).."%"
		local to_print = prof.name..":"..usage
		print(to_print,1,1+i*9,7)
		i = i+1
	end
	for name,prof in pairs(lingers) do
		local usage = string.sub(prof.time*100,1,5).."%"
		local to_print = name..(prof.this_frame and "[X]:" or "[ ]:")..usage
		print(to_print,1,1+i*9,7)
		prof.this_frame = false
		i = i+1
	end
	profiles = {}
end

local function display_both()
	draw_cpu()
	display_profiles()
end

-- This swaps out function calls depending on whether or not you want to have
-- profiling. This is to make it as much as possible so that you don't have to
-- think about cleaning up profile calls for efficiency.
-- The first boolean is for detailed profiling, the second is for CPU usage.
function profile.enabled(detailed,cpu)
	profile_meta.__call = detailed and _profile or do_nothing
	profile.draw = detailed and (cpu and display_both or display_profiles)
		or (cpu and draw_cpu or do_nothing)
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDAyOjU0OjAzIixtb2RpZmllZD0iMjAyNC0w
OS0yMiAwOToxMTowMSIscnVudGltZT0xMSx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzMwIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJwcm9maWxlci5sdWEjMTE3Iix3b3Jr
c3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJnZngvMC5nZngiLHdvcmtzcGFjZV9pbmRleD0yfSx7
bG9jYXRpb249Im1hcC8wLm1hcCIsd29ya3NwYWNlX2luZGV4PTN9LHtsb2NhdGlvbj0ic2Z4LzAu
c2Z4Iix3b3Jrc3BhY2VfaW5kZXg9NH19XV0=
:: [eoc]
