picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTEzIDIxOjI5OjAxIixtb2RpZmllZD0iMjAyNS0w
Mi0xMyAwNDozMzowMyIscmV2aXNpb249MTExOF1dbHo0AOIRAAA4RgAA8yF7WzBdPXtibXA9cHh1
AEMgEBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIANd5PTAsem9vbT0xMn0sPwDwCgcH
BBAnIAcvHgcABx4PFx4XDg0HDQ4XHg0RAF8uByAnEE8AJkAODxcOSwAQB1UAPw4NDlEAIv8GBgcE
EBogChcKEAoXCgAKNwq3ADcAQgAasQoJBDAZMAkACQAZBADQGRoZAAkQCQoXCgkQCVIAzwAJCgBX
AAqXAHcgV50AG9AQDARQCRAJsAkQCZAJVQBgAAlACRAJFABwEAkwOTAJIGkAIRAKEACRAAkACQoH
EAcKiwD-CCAKBzAHCiAZIApQCiAJ8AEJsAkgCZAJgAAe-wAACbAJ8HEJ0AnwAwlwCSA-ABqfICAE
-xf----zNgAa8h4PEgRQHxewDhEOkA4BBwYBDoAOIQ0BDmAOASwRDlAOAQwXHBEOQA4BDAcMAQwK
AFEhDCEOMAgAwAEHAQ4gDhEcAQcRBgoA8A8BDQEMBxENBg0BDgAOAS0hDQYNBw0BHgEdBi0GDRYK
AJENBgcWBwYNBh0iAIAHBg0BBgcNITsAQAURFQ1gAF9hDmBuMMMAGvEDEBIEYB8XwA4RDqAOAQYH
AQ6QwwARcMMAE2DDABdQwwATEcMAFRHDAHIBBgEcEQcBxQBjBg0BDBcRxQBQPTEdBgfDAFAWPQYN
FsIAFxbCAGERBx0RBzE1ACIVAcAAT3EOYH7AABvwBBISBHAfF_AOEQ7ADgEWAQ6gDlGNARA8jAHy
BgEMFywBDmAeAQwHHAEMAR5ADiEMMYABQQcBDDG-AHUwDgEGEQcRhAFFBg0RF4UBAKsAUQ0xDQYN
xgBxJg0GPQYNJpMBCYsBUDEHARYBygD-Ax4BBgEFEQUBBgEeUA5xDoB_QIwBJwJPAnABDSEOgA4R
xwChDhEMFxwBDlAOEYwBIAEOzwAzIQwRzwADCgBQBgEHERyMARAQzQBjERcMAQ0GzADGHTE9AR4B
Fg0GPRYdxQAiFg3DAEARHQcRkAJvDRUBFQYBjAEiEQ-AAAMPAyEGB0YCQQ0hDnDAABNQwAAVQMAA
ETDAABUBwAAEjQEyARwRvgBSDREHDAGKAXENBw0GDSEtQwJYDQYtBh2GAQAiAEAhDQcGIQMSAcQA
PxEFAQ8DI08QBPDwMgCwTwEBBAcxABq-AwMEAAcABwwHAAdUBhsgAwY5AF83DCcwB7IFGyIDCDkA
ERc7AA89ACIwZwwXsQAQEAQAD4MBfvIQCBAEIBlQGUAJFwkwCRcJIAk3CRAJNwkACQcKFwoHGQYA
MRoXGgQA-wUKCRoJCjkaWRo5ADkAGRAZEAkgGcIGG-EBBhAEEBkwGTAZIAkaCRAJFwQAEADcBxMZ
BABgKRo5GvkF_wcvEBkvARsxBBAElQABAgDQAAkaGRcZFxkaGRr5ARcAD4QIHNAKBDAXUFcgdxB3
APcOaQgvQDfqAAwZOEEA8QcMDgRAF5AXkBdgBxAXEAcgFwA3ABcQBgD-BCB3EAcAdwDHAJcgdzB3
QFdgNzBaABlhDg0EIAdQAgD-E-AHF7AXUAdAF0AHAAcgNyAHQFdwV0AHEFcQB0BXgDegF1BZABlA
EA4EMFUAYTQH0AfwIVYAn3AXwDewN8AXYEgADA_FAh0NMQDxABAeED4QHiAOER40HhEOAKIHQAQ-
DwQYBvEIHgENAQQcBywEAQ0BHhECBAwHHAkMBAInAHEIBCwZDAQIfgXxDgIOBAw5DAQOAgEeARgE
BzkHBBgBHgECDggENwQIFgCQAggODDQMDggCSABxCAIMHgwCCEgAZBECDjwOAnkAMxIYEngA-wQh
MiENAR4hHjEeIQ4ALhA_EC4A2QAZgBIRBGA_oC40HQcAzgCRPkAOAQQdBy0EDwmTAgQNBx0JDQQC
CQekCAQtGQ0ECAEPDc8AQw05DQSXAATRAAApAAbTAAEOAFAIDg00DdUAACgAogYBAggCDR4NAgge
AFAMEQIOPUQAQBAOIQ7aALARDjAuAA4BMgEMBvsGv1EMAQ6AThEO4B4w2gAeYrAeNB6ADqgBIw5g
2wAA0gYH2wAmDjDZACcOINYAAq4AA9cAAG0BJQ8N2AARDKABA9cAAqABBNUAQxEOEB7TAPAGHjAO
ERIREhEOYB4RFhEekA4BHAEOmAg-4B5wzAAZ8BQcGwSwPvAGHjQe8AMOFD8PFA7wAQ4EfQQO4A4E
HRcdBwkdBLcJgAQNJx0HGQ0EvgkA4QAxFy0p4QDBgA4BCAIETTkNBAIITQhSCAIELVkOAMBgDgEY
AgQNeQ0EAhhdCCABCAABUAdZHQQOHwDwAEAOEQ4BDgIERy0EAg4BDtoIAP4BkTgCFDcUAjgBDCQB
8A0MBhEoDRI0Eg0oEQYMAR4BBgwRGB4dMh0eGBEMOAEwDCECMwGxDg0XDQ4MAg4IAiE4APANIQkB
AggSHhceEggCAQkhDiAeMQIYHhceGAIxHtsLcjESCD0IEjHQCIAMBwwxAjgCMfQIAIUA0QwXBgwh
CTEJIQwGFwxIAvECBgcGDBEGDBEcEQwGEQwGBwacADAcFgzICRAXXAswDBYcngDDBxwBHiEMEQwh
HgEcJgAQFpEAIC4xdwIgDBZgAFAhDkA_QAYATC7wAC5XBWMtMi44NzWxAWItMC4xMjW2AR8xZgQe
DzEAkA-5BBcjDxD6BBELKAAhDwz7BBEKYgExCw8c-ARhCAsBHgEaVAOxGgEeAQsICgQ3BAoWAPEF
CwoIBzQHCAoLAR4RCwoLBxgHCwpKAGQRCwg3CAt8ADQbGhv8BB87-ARIIw8QIgQTDP0EIQ8MJQQU
C-4EMQwPHCkEIQoMmgARG9QAERsrAIIMCgsENwQLCpkCgQwLCgc0BwoL9QKyAQYBDAsMBxoHDAse
AIMPDREMCjcKDAAFMxwbHAAFMjwBCAAFHwgABUEH3wAnDjDdACgOINoAArIAA9sAAgMFBdwARQgB
HhHbAAADARUR2QABAwUC1gAAAwU3HBEcAwUeGAMFD7oCNA9_A_sTA30DEQMnACEPG30DEQvCATED
Dxp9A0UKAwEeqQIzHgEDywEAFgCgAwsKDwo0CAoLA0sAcQsDCBoIAwtLAGQRAwo4CgN8ADQTGxN_
Ax8zfgNIEwOeAhQDfQMRG6ACFAx9AwDSAACjAgKjACEBHNQAERwrAJIDCwwENwQMCwMOAIMMCwo0
CgsMA30DlAMMAwobCgMMA30DUwMLOgsDfQMzExwTfQMfM30DSgbeACcOMNwAKA4g2QACsQAD2gAC
fAMF2wAQCqUBIAwLsgEjCwymAYEMAwgbCAMMA30DUQMLOAsDfQM3ExETfQMfGn0D-0UpDxn7BhEJ
fQMTCfoGEh99AwDkBhEZzwERGe4GUQkENwQJFgAiCwl9AxEJ_wZzCQsIGggLCfsGRAo4Cgt8AC8b
GfsGUxMZoAIE_wYRCaECFgn6BhIfpAIC_gYE1AAC7AYB1gAD3AYhDAl9AxUJ_gZ2CQwKGwoMCfoG
NQs6C-oGHxn6BlQZGfoGBNwAKA4g2QACsQAD2gAD_QYE2wAAfQMiDAl9AxMJ_gZzCQwIGwgMCfoG
Pgs4C-oGD30DKg8xAP----------------8qXwgIBPAwkwAeD40F------9MMXwBDAIAL-whOQAc
I-whOgAffDkAHO8hLFEsUTxBPEE8USxRLHcAHZNrAStBKwEGHQEFAJ82KwENEQ07MXtIAByhEVsG
MSsGERYBGwUAr0YBGx0RDQEbQatIABxR_wkJChsDADQpChsLAD8jCotHABxLgUcGEQMAPwdGAUUA
HNEdNS0FNgUdBQYVBgUdCgAgBywFAGIdFR0FBxYFAB8NVAAgIQYtVQAQDQYAFC1WAG82BR1VLUVP
AB0iC2kCACIbWQIADz8AHAM2ABMbRgAfCz8AHP8B8QQGHUEGHUE2MQ0QDTEwcT8AHHBxBmEGERYh
BACPRiEdEA0hQKFCABzvkVcRVxFWEVYRDRAtIUCAAB1xAQZNEQc2DQQA-wJdEVwRDQUWBQ0RAA0V
DQARUC0CHRMNGAIIHQIWHRQAP2UdVVEAHEALkwsDAgAv_x85ABxgUxsDKzM7OgAfGToAHC-5MDEA
HLK7NBsUORsESQsEWUICD0AAHT90_RwzABy-ezQ7ORQbSQQbWQS1AiPAvQUNFS0FAQURHQUBAgDf
HREFIQ0VQQ0BBUENYUwAHakVDSUNBREFIQUBAgAv8QdJAByRfRUNBT0RBQEFmgAQBZQAzwUNMQUB
HTEFAQUNYRcEHfEDBQ0VDRUdFQ0FDQYFHRUNBiUd9QD-Ag0VBhUdBgUGBQ0FDTU9BS0FWAAdL-gw
oAQoLzs5VQYdP-kkuzIAHANvABAL1QQvObvDAx4wUQ1hAgCvHQVBHVE9AQURfUIAHH-xHgURBRG9
NgAcMGENUeQBv0EFHVEdIQUNAR0BRAAfL-gwMQBNH-sxAB5jCgMLAysDxgQfCT4AHMUDYQsDQQcD
UQcLA1EKABFBBAAPSgAcm0EDG1EDC0EDGwkAD0cAHP8I_wFBGwEHERcBCwEHARchA2EDARMBAxHU
Ah3-DoshSwEHETsBByErEQcBBwEbAQMBBxErA0ErAQsRlAAdEitiAfEAczUDJRQFBAUEBSQFpAIE
AgAfdEsAHP8LCwNLI0sDBRMLAwsTBAVDBRRFAhRSJEI0IgRJABxgGwMbAwsjHAFf8Rk3ARdIBx1w
8RkTARMBE0YAD-UJHYDxBwNRE1EDC3wAMAEDC4gATwETSwHqAR7A8QADYRNRCwNRExETSACPAQML
ExsDAUtHABzxAPsCQRsBFxEHMRcBB3EDES8CDy4CHYC7ITsRBwErISgC-wMHAQcRGxEHAQMBC0ED
KxEDAStNABwDGgISFAgAHxIOAAgikgQIAA9hACMQNAYA-wYyFgUCBBIGJTI1AgQiFSIEQgQCBFJR
AB0yC1MLyAGAE1sDewNbAwsEAACjAhAzpwIPTQAckOsBWwEDSwEDWwMAIRNLBgAPQwAcQHsBawMD
AHFLEwFbAwFbCQAPFwIdUHMBUxEDoQIwEQNRXQKxFAEDGwMBEgEzARIKAB8TsQIfL4NbIAEx-wT7
AANbIzsTCwM7AxsDO0MrAxtTiQAdb-IIcXxxfIgLHcAiFDJEIhRCAQRCAQwOL1ABXAEMUQYAD1oB
KxERuQMADgARG34DEQsaAA-TAB3-A0sBE1sBA2sBWwMCWwMCawP7AEEAHP8CEwFLAwFbAWsCA1sC
A1sD_wdAAB7-BhMBIwEzAQMBUwECUxJTAhM7I1sDexwBJr8EUQQiFCITMkMSI0UAKTADIhRfAa8i
AQMLIxIBEwsztwIfANwDETuqAm8lMwUkNUS8BibwAiEiMQIEEhEMAgQyHFIMAQwySBEQPE4RXzEM
ITwRRwIoAJ8oUBQiEwEiPgJvEiMLAwEz5gAdH-w4CR1v-AonDAf8tgAdf-wRBwwn-Ao2ABzwDGsF
WwUMSwUHDTsFDQYNKxUNBg0bBS0GDQsFHREAEQUCAB8GJwwdT3V8-SAzAByABWsNBVsdBUtxAGA7
DRUNBStaDa8bDTUNBQsNRQ0FTwAcEvGIDSMBFQgAP-UA87gDHW-zEAtTG9MEBSFvAxIjEvMQNwAc
-wL7CwUrBS0FLQUrBSsFIwUjBZ0DHS-xMCUOHiMFDeUBUy0GDQUtDAAPFAAKDwsCHh-9lgAdKg1l
AgAPPwAcb40VDQX9I3wBIQB_Ad8rDQMbBSsNIwUrBQMrRQAfrzstBWsNOyMNA1s-ACDwAAcBKwUb
AQMtBQ0BAzsFC1gFLwUDwAojPyFXgQwCH4ItBwwFLQUGJTUQIAUNJxAQFgwAIA0mCwB-NhUNRgUN
VlgAHF98dX32GDQAHP8EB_UdVRYNRSYNNTYNJUYNFVYNBXYAH3AmHUYNFg02BAAvPZY-ABxRKwUD
Ww0DADoFAxsYAh97SwAoISstDQBPKyMNAxYXHhAAdgoApgIgCwMkEiMTAQsAPyMFC5kMH0QrBRNL
lQAXWwwAD7MCHTkLBVYDAF9lC2MLY0QAHD-2GHWaBR44VgULAwABdwAPJAMdI5Y9HAIPfwAMUG09
OH19
:: gfx/enemy-01.png
b64$iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8-9hAAAAAXNSR0IArs4c6QAAAYFJREFU
OI2NkzFLw1AUhb_Ekr-QyW7Bwf_gs1g7SFIqnbKIcwkEuoQsQqB0li6dgpWELG3pXP_DiGTTxd_Q
oXF4vfGl7eCBQN5955y8e3OewR5VsKgAjHhg6GvBYV3WdbGzSgH46roAZMVU1_PYIwB0nhEPjJaI
k2ef7fKdziplev6NM-YbBtnThNHnGQ8311zdXtB5nFAFi6olhO3yndl60xTbl1C8qROMfXiaMFpv
GsamvMzWG7xS29HEfPTrslcqbm1gxAND_o4KzeGEWOfIDEyZgVcCwfCP_dE-EoPieKUaZhUsqrqF
qCghTv6OfwipxUnjpLVBaFsQDHHyNpnXg95P48m8Hk7ehmCouHu00BEnysQ1lYkGZ_yDvVOcUwZz
C7AtojghzC2iFx-Sndp0TcL7V6KiJLQtxd3jKIleCdGdC65JA_mOME9rsfwF4zCJeh5kWNLz3KJO
4vBxwlfX5SiJQvRKGsOSL88OklgbyIaESloS6HXd5Ojq-vc6S_0XnbbNGOdESrIAAAAASUVORK5C
YII=
:: gfx/enemy-02.png
b64$iVBORw0KGgoAAAANSUhEUgAAABIAAAARCAYAAADQWvz5AAAAAXNSR0IArs4c6QAAAYBJREFU
OI2VkzFrwkAUx-8n4ldw0i10yHewc6k6mESETFlKP0Ag4FBxKQTEuXTpFBATstTSuXbo4locstml
n6FDr8P5LneXKPQPR5J3--fLe7kXhjPi0YqrzyyesFPe5rnkrFhW9k7Bmqaxu0kBAMuLL7jTUDNn
94uTVTbq6BrE6sm4Ow2RFUt0N6lcBJYgqib4UYhWDyi24n4-lmHyJA_hhFUqmhcKqQaiet6eP2Ws
Uakm8suM-bgCAYQn_AEeX151kPamOCnbMkWxOJFVHfoeWDxhGmhmtYDIh5u3kQVDYPitrSwYws3b
QOQLr6LKHCFOBMxrCJgidxoC1q-wGCDwaMU7tsO37x_8Yzv8znI4x0Bcd2vOo5VYu7W217Edrs6U
rIhO4KkFwGphPvLEhld2Px95mOWp8BiSIDqBQ99Dd5MCeQrk5VHTNyEIfWTKZ9SeDMQTVjucR8jN
9RUuBzb824UGa1KymqDCTKmzo_XURo8yf1AAILjZ2r9Fp2jG-wAo-dIT4VkPIwAAAABJRU5ErkJg
gg==
:: gfx/enemy-03.png
b64$iVBORw0KGgoAAAANSUhEUgAAABIAAAARCAYAAADQWvz5AAAAAXNSR0IArs4c6QAAAYRJREFU
OI2Vky9vwkAYxn9ttn6FKXANAj-JJxiI0jIWVN0_AAkJhlSSLOgFg1jI-pTMDDIzA4iZ2QVRBwaL
RXATt956bUe2Sy7pvc_TX56_753BkSU6DyJ5NvpN4zfvyTHAJBrk1o8BNXOhXBehcy7Ex5O2Q_dc
FMp1kU4KYKYhxWnIoLTB7bZl0a4o3e22GZQ2FKdh5rfNNMTfJ1S7AtFCfq8aquzvycC0RABBlCDl
QDKeJEhL02n9qKtGBgLSk0kVN3exfBeCqhBUZaN3WyHu0PduK7Vv32L5rpqvxj9-_eTNtggcD7c-
ZkINd7TVgkz8Gu7zGXRa9J5DTl8_laZAw9krPkB-DJ0Wrmcy8WsayO22wT5Ij20xnL0qzUj2CORE
gmhPz7YI7i8hPEinZ9K7elTayJLl9YWH0W8aamrrCw_AkYWEOJ4C4Elb4HgZiJYoXulkMTjvHCfJ
BcUwkKMFGN-KG966vtFSpN9b5tHGhjjdPDGZdIo-r-iO-fZQ-w37C_QLffv1evDJCm8AAAAASUVO
RK5CYII=
:: gfx/myspr.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTIwIDIyOjE5OjIyIixtb2RpZmllZD0iMjAyNS0w
MS0yMyAwMjozMjo0NCIscmV2aXNpb249MTddXWx6NABMAQAAzgEAAPAFe3s4LDE1LDE4LDUsOH0s
ezksMTYOABE3DgAgMTAMAEIxOCw4DwAaMR4AEzI7AAIeAEAyNCw4IAAwMywwDgAwNSw2DgASMg4A
MDYsNA4AEjEOACA3LFoAUDAsNSw5DwAgOCxLABA0MQAQMxAAEDkNAMExMyw3LDEyfSx7MzA7AAFf
AAAgAEAxNywxSgABTABjMTgsMywzWQBjMTksMyw2DQBkMjAsMyw4DQAXMQ0AITMyUQATNrkAIDMz
xQBCMTcsOQ8AGTQPAFAxLDcsN2QAAEYABwwAAGkAEzftABA0zQBAOSw1LK8AETVdAOAyLDgsNX0s
ezYsIjE2IhAA8AEiOCIsNn0seyIzNSIsIjI4BQBiNyIsIjEzBQAAGwAAEAAxNCIsCAARMQwABBYA
JDE0BQARNwQAcH0sezAsIjYVAKA2IiwiMiIsMH19
:: gfx/myspr_meta.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE2IDIxOjQyOjQzIixtb2RpZmllZD0iMjAyNS0w
MS0yMyAwMjozMjo0NCIscmV2aXNpb249NF1dbHo0AMsAAADYAQAA43t7InNoaXAgMSIsMH0sDQAY
Mg0AGDMNABg0DQATNQ0A33BsYXllciBzaG90IDEUAAAfMhQAAARWAGhtdXp6IDENABgyDQAJJwAE
fQAmamVoAAAMABcyDAAXMwwACDAABKwAeXVmbyBhIDEOABkyDgAEQgBaZW5lbXnVAAcTABUyCQG-
b3Qgc3BsYXNoIDEUAAAPKAABHzMUAAAErAB6YmlnIHVmbzIBlmhpdGJveCIsM4UABBMAITE4KAAC
lQCwaGl0Ym94Iiw3fX0=
:: gfx/ship.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTEzIDIxOjI1OjE4Iixtb2RpZmllZD0iMjAyNC0x
MC0xMyAyMToyNToxOCIscmV2aXNpb249MF1dbHo0AAcEAACpNgAA8yF7WzBdPXtibXA9cHh1AEMg
EBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIANp5PTAsem9vbT0xMn0sPwBP8gHtAgIA
CA9PAB1--QHWHQa9BQQAGz-F-QFoAB0pAg0CAF79AQL9DwMAD1YAHTEKEBoCAAQIACsaAAgAHxAi
AFMPuAAdL-DwMgCB8A1gEcABBwYBsCENAZABLBGAAQwXHBFwAQwHDAEMCABAIQwhYAYA8BkBBwFQ
ERwBBxEGAVABDQEMBxENBg0BMAEtIQ0GDQcNASABHQYtBg0WCgD-Dw0GBxYHBg0GHQEwAQcGDQEG
Bw0hUAEFERUNEXBhMKIAIS8GB6IABCBgEaIAIlARogCQQAEGARwRBwEGCgBgDQEMFxEGkAD0BD0x
HQYHARABHRY9Bg0WARABDRahAP8CIBEHHREHMUABBhUBFQ0RYHGfACKAFgGgUZABPAGcACAsAZwA
8AEcAQwBUCEMMQwhMAEHAQwxngBgMAEGEQcRQgEAIwExDREXQwEQACMB9gQGDTENBg0GBxEmDQY9
Bg0mER0GRQH-AwAxBwEWAQcxMAEGAQURBQEGAacAJPEEBwYBoAENIaARLAGAEQwXHAFwEUYBgAFg
IQwhDBFQqgABCADwAgYBBxEcAQYBMAENBhEXDAENswDgBwYdMT0BEAEWDQY9Fh1PAQKkAADzAc8x
BxEdBxFAEQ0VARWfACYvBgefAAkiAWCfACABYEcBQQEcEUBFATAHDAGHAnANBw0GDSEtWgFAFg0G
LdoBFQFEAWABMCENBwaXAr8BUBENFREFAXBhQI0DgQ8yABz-BQQGBAAfGAAOFx4XHh8XHh0OAB4A
QQAafwgIBCAH8Cw0AB_PUAcMB1AH8Bw6ACC-J0AHDAdAF9AH8AU_ACYDQgA-YAdAQwAiBUUAf1AH
YAdQB0DZAX7yEAgQBCAZUBlACRcJMAkXCSAJNwkQCTcJAAkHChcKBxkGADEaFxoEAP8GCgkaCQo5
GlkaOQA5ABkQGRAJIBkgbwAhAHEANRoJMHUAWAoXCgkQBgAxGRoZBAARWQIAbwkAGQAJMGsAJQxv
ADIwCRoEABI5AgBfQBlQGSBnAR7-BzcXsFeAd3B3YJdQl1CXYHeAV6A38BZHAB3xBGAX0BfQF6AH
EBcQB2AXADcAF1AGAP8AYHdQBwB3AAcwt0CXYHdwXgAkYPAEB1AHcD8D-xMLF9AXcAdAF0AHIAcg
NyAHYFeQV2AHEFcQB2BXoDfAF-AXXAAdEDBXAGE0B9AH8CFYAF9wF8A3sEoAIi-w8DIA--------
--------------------------------------------------VQPTEyfX0=
:: gfx/stage.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTEzIDIxOjI2OjIzIixtb2RpZmllZD0iMjAyNC0x
MC0xMyAyMToyNjoyMyIscmV2aXNpb249MF1dbHo0AP8BAABtNAAA8yF7WzBdPXtibXA9cHh1AEMg
EBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIAMp5PTAsem9vbT04fSw_AE-yAe0CAgAI
D04AHH-9AdYdBr0FBAAbP8X9AWcAHCkCDQIAXv0BAv0PAwAPVQAcMQoQGgIABAgAKxoACAAfECIA
Uw_3ABwv8PAxAP-------6TH8gBdPxW9Pp0ePR59BABinV6dXt0eAgBvnT69Pv0GWAAzDwQABQ9k
ACIv8PDiAf8Uum0fFd0evT69Pt0eAgBvvV6dXv0F2gErAUgABwQAb91_fX79BFQAM2-9AB7dHn0j
Aimf8gA9HxUdHp0eBAAAMX59frEAAwIAD1wAIVN-FX1_fUAAEN1NARMADQAQfQ0AHwYGASUGUQAE
EgEPBQEtAKkAA1YAIx69BAAEAgAv-QiuASsInAAPsAAyyvBGDQ8VHbAeHbANDgQATy4N8DZNAB-h
HxUNsA4dDrAtDrAdDg1JAE8OLbA_SwAwIS0ODgAvDR6YACF1DxUNDg2wDgUAET5TAAMEAA9QACAg
PxXXAEEOLbAumQAvLQ4vASkESQAvDh3jAClJPxWwLXgBAwQAD5cAJgaOAA_aACsf8DEA--------
----------------------------------------vFBtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDEwOjQ5OjA5Iixtb2RpZmllZD0iMjAyNS0w
Mi0xMyAwNDozMzowMyJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAwOjUxOjM1Iixtb2RpZmllZD0iMjAyNS0w
Mi0xMyAwNDozMzowMyIscmV2aXNpb249MTk5N11dbHo0AGgAAABYEAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD--------------------78QgiKSxoaWRkZW49ZmFsc2UscGFuX3g9
MAgA0nk9MCx0aWxlX2g9MTYKABB3CgCAem9vbT0xfX0=
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAxOjQ4OjI1Iixtb2RpZmllZD0iMjAyNS0w
Mi0xMyAwNDozMzowMyJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAwOjUxOjM1Iixtb2RpZmllZD0iMjAyNS0w
Mi0xMyAwNDozMzowMyIscmV2aXNpb249MTk5N11dbHo0AKAAAAALCgAA-zBweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDQA8PkAQFBgdADJAICQoLQAyQDwwPDQ8ODEAM8P8BAOv-J6oB
EAYPIBABIAEgAfAAAhACDhABIA8hIAEwD0Dwww8oD--wxg-4Cg--D4AP9w8NAfAJARAGDjAA----
--_9H-8BAKzPyA9AAA8QQP--sPD-AQD-6lD-----KQ==
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAxOjQ4OjI1Iixtb2RpZmllZD0iMjAyNS0w
Mi0xMyAwNDozMzowMyJdXQ==
:: draw.lua
--[[pod_format="raw",created="2024-11-08 00:54:54",modified="2025-02-13 04:33:03",revision=2532]]
function draw_edit()
	camera(0,0)
	cls(2)
	fillp(0b11001100001100111100110000110011)
	rectfill(0,0,199,199,0x1502)
	fillp(0b1010010110100101)		-- sets checkerboard
	line(100,0,100,200,0x0d01)	-- crosshair
	line(0,100,200,100,0x0d01)	-- crosshair

	fillp() -- resets fill pattern
	draw_menu()
	
	if selected_sprite then
		if meta[selected_sprite][2] > 0 then
			mspr(meta[selected_sprite][2],100,100)
			msprc(selected_sprite,100,100)
		else
			mspr(selected_sprite,100,100)
		end
	end
	
	if (time()*2)%1<0.5 then
		pset(100,100,rnd{8,13,7,15})
	end
end


function draw_list()
	cls(2)
	fillp(0b11001100001100111100110000110011)
	rectfill(0,0,199,#menu*13+20,0x1502)
	fillp(0b1010010110100101)
	line(100,0-scrolly,100,200-scrolly,0x0d01)	
	line(0,100-scrolly,200,100-scrolly,0x0d01)	

	fillp()
	printh(menu == nil)
	
	draw_menu()

	local mymenu = menu[cury][curx]
	
	if mymenu.cmdy then
		if meta[mymenu.cmdy][2] > 0 then
			mspr(meta[mymenu.cmdy][2],100,100-scrolly)
			msprc(mymenu.cmdy,100,100-scrolly)
		else
			mspr(mymenu.cmdy,100,100-scrolly)
		end
	end
	
	if (time()*2)%1<0.5 then
		rectfill(100,100-scrolly,100+magnification-1, 100-scrolly+magnification-1, rnd{8,13,7,15})
	end
end

function draw_table()
	cls(1)
	draw_menu()
end

function draw_menu()
	if menu then
		for _i = 1, #menu do
			for _j = 1, #menu[_i] do
				-- change color if cell is currently selected
				local _c = menu[_i][_j].c or 18
				if _i == cury and _j == curx then
					_c = 7
				end
				
				-- make copy of local cell we're working with
				local mymenu = menu[_i][_j]
				
				-- print cell
				bgprint(mymenu.w, mymenu.x, mymenu.y, _c) --*****
				bgprint(mymenu.text, mymenu.x, mymenu.y, _c)
				if _i == cury and _j == curx then
					rect(mymenu.x-2, mymenu.y-2, mymenu.x+(#mymenu.w * 5), mymenu.y+11, _c)
				end
			end
		end
	end
end
:: input.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAzOjQ5OjI4Iixtb2RpZmllZD0iMjAyNC0x
MS0wOCAwNDowNjozOCIscmV2aXNpb249MV1dbHo0ABcAAAAVAAAA8AZ7ezAsMSwyLDN9LHs0LDUs
Niw3fX0=
:: io.lua
--[[pod_format="raw",created="2024-11-08 01:03:28",modified="2025-02-13 04:33:03",revision=2082]]
-- warning, export overwrites all of output_file every time it's used!
-- can store everything directly as variables, a lot of interesting uses i can think of

function export()
	store(output_file,data)
	store(metadata_output_file,meta)
	add(msg,{text="Exported!",t=120})
end


:: main.lua
--[[pod_format="raw",created="2024-11-08 00:51:35",icon=userdata("u8",16,16,"01010101010101010101010101010101010606070707070707070707070606010106060707070707070707070706060101060607070707070707070707060601010606070707070707070707070606010106060707070707070707070706060101060607070707070707070707060601010606070707070707070707070606010106060606060606060606060606060101060606060606060606060606060601010606060606060606060606060606010106060601010101010101010106060101060606010707070701010101060601010606060107070707010101010606010001060601070707070101010106060100000101010101010101010101010101"),modified="2025-02-13 04:33:03",revision=2239]]
include("draw.lua")
include("update.lua")
include("tools.lua")
include("io.lua")
include("ui.lua")

function _init()
	printh("new run")
	modify_text_display = create_gui()
	
	window{width = 200, height = 200}
	
	input_file = "/shmup/myspr.pod"
	output_file = "/shmup/myspr.pod"
	metadata_file = "/shmup/myspr_meta.pod"
	metadata_output_file = "/shmup/myspr_meta.pod"
	data = fetch(input_file)
	meta = fetch(metadata_file)
	myspr = data

	-- initial seed function for metadata table
	--[[
	meta = {}
	for x = 1, #data do
		mobj = {}
		mobj[1] = "sprite " .. x
		-- values greater than 0 refer to a specific sprite, 0 means 
		mobj[2] = 0
		meta[x] = mobj
	end
	]]--
		
	debug = {}
	msg = {}
	_drw = draw_list
	_upd = update_list
	menuitem(1, "export", export)
	
	curx = 1
	cury = 1
	scrolly = 0
	scrollx = 0
	scrollspeed = 4
	magnification = 1
end

function _draw()
	_drw()
	
	if current_page == "edit" then
		modify_text_display:draw_all()
	elseif current_page == "newline" then
		modify_text_display:draw_all()
	end
	
	if #msg > 0 then
		bgprint(msg[1].text,100-(#msg[1].text*2.5),97,14)
		msg[1].t = msg[1].t - 1
		if msg[1].t <= 0 then
			deli(msg,1)
		end
	end
	
	-- debug --
	cursor(4, 4)
	color(8)
	for txt in all(debug) do
		print(txt)
	end
end

function _update()
	_upd()
	modify_text_display:update_all()
end

:: myspr.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTIwIDIyOjE5OjIyIixtb2RpZmllZD0iMjAyNC0x
MS0yMyAwMjo0Mjo1MSIscmV2aXNpb249NF1dbHo0AAEBAABuAQAA8AV7ezgsMTUsMTgsNSw4fSx7
OSwxNg4AETcOACAxMAwAQjE4LDgPABoxHgATMjsAAh4AQDI0LDggADAzLDAOADA1LDYOABIyDgAw
Niw0DgASMQ4AIDcsWgBQMCw1LDkPACA4LEsAEDQxABAzEAAQOQ0AwTEzLDcsMTJ9LHszMDsAAV8A
ACAAQDE3LDFKAAFMAGMxOCwzLDNZAGMxOSwzLDYNAGQyMCwzLDgNABcxDQAhMzJRABM2uQAgMzPF
AEIxNyw5DwAZNA8AUDEsNyw3ZAAARgAHDAAAaQATN_0AEDTNAEA5LDUsrwARNV0AgTIsOCw1fSx7
CwCAMTIsNiw2fX0=
:: out.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDA0OjAxOjE4Iixtb2RpZmllZD0iMjAyNC0x
MS0yMSAwMjoyNTozNCIscmV2aXNpb249M11dbHo0ABMBAAB-AQAA8AV7ezgsMTUsMTgsNSw4fSx7
OSwxNg4AETcOACAxMAwAQjE4LDgPABoxHgATMjsAAh4AQDI0LDggADAzLDAOADA1LDYOABIyDgAw
Niw0DgASMQ4AIDcsWgBQMCw1LDkPACA4LEsAEDQxABAzEAAQOQ0AwTEzLDcsMTJ9LHszMDsAAV8A
ACAAQDE3LDFKAAFMAGMxOCwzLDNZAGMxOSwzLDYNAGQyMCwzLDgNABcxDQAhMzJRABM2uQAgMzPF
AEIxNyw5DwAZNA8AUDEsNyw3ZAAARgAHDAAAaQATN_0AEDTNAEA5LDUsrwARNV0AgTIsOCw1fSx7
CwDwCjEyLDYsNn0seyI1MCIsIjEiLDAsMCwwfX0=
:: test.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAzOjI1OjQ0Iixtb2RpZmllZD0iMjAyNC0x
MS0wOCAwMzo1MDo0MCIscmV2aXNpb249MTddXWx6NAAJAAAACAAAAIB7Nyw4LDEwfQ==
:: test.txt
--[[pod_format="raw",created="2024-11-08 02:37:45",modified="2024-11-08 02:37:49",revision=2]]
test="useful data"
:: tools.lua
--[[pod_format="raw",created="2024-11-08 00:58:52",modified="2025-02-13 04:33:03",revision=2086]]
function bgprint(txt,x,y,c)
	print("\#0"..txt,x,y,c)
end

function fillBG(self, col)
	rectfill(1,1,self.width-2,self.height-2,col)
end

function fillSELECTED(self, col)
	rectfill(-1,-1,self.width+1,self.height+1,col)
end

function removeAllChildren(el)
	for child in all(el.child) do
		el:detach(child)
	end
end

function dump(o)
   if type(o) == 'table' then
      local s = '{ '
      for k,v in pairs(o) do
         if type(k) ~= 'number' then k = '"'..k..'"' end
         s = s .. '['..k..'] = ' .. dump(v) .. ','
      end
      return s .. '} '
   else
      return tostring(o)
   end
end

function print_table(node)
    local cache, stack, output = {},{},{}
    local depth = 1
    local output_str = "{\n"

    while true do
        local size = 0
        for k,v in pairs(node) do
            size = size + 1
        end

        local cur_index = 1
        for k,v in pairs(node) do
            if (cache[node] == nil) or (cur_index >= cache[node]) then

                if (string.find(output_str,"}",output_str:len())) then
                    output_str = output_str .. ",\n"
                elseif not (string.find(output_str,"\n",output_str:len())) then
                    output_str = output_str .. "\n"
                end

                -- This is necessary for working with HUGE tables otherwise we run out of memory using concat on huge strings
                table.insert(output,output_str)
                output_str = ""

                local key
                if (type(k) == "number" or type(k) == "boolean") then
                    key = "["..tostring(k).."]"
                else
                    key = "['"..tostring(k).."']"
                end

                if (type(v) == "number" or type(v) == "boolean") then
                    output_str = output_str .. string.rep('\t',depth) .. key .. " = "..tostring(v)
                elseif (type(v) == "table") then
                    output_str = output_str .. string.rep('\t',depth) .. key .. " = {\n"
                    table.insert(stack,node)
                    table.insert(stack,v)
                    cache[node] = cur_index+1
                    break
                else
                    output_str = output_str .. string.rep('\t',depth) .. key .. " = '"..tostring(v).."'"
                end

                if (cur_index == size) then
                    output_str = output_str .. "\n" .. string.rep('\t',depth-1) .. "}"
                else
                    output_str = output_str .. ","
                end
            else
                -- close the table
                if (cur_index == size) then
                    output_str = output_str .. "\n" .. string.rep('\t',depth-1) .. "}"
                end
            end

            cur_index = cur_index + 1
        end

        if (size == 0) then
            output_str = output_str .. "\n" .. string.rep('\t',depth-1) .. "}"
        end

        if (#stack > 0) then
            node = stack[#stack]
            stack[#stack] = nil
            depth = cache[node] == nil and depth + 1 or depth - 1
        else
            break
        end
    end

    -- This is necessary for working with HUGE tables otherwise we run out of memory using concat on huge strings
    table.insert(output,output_str)
    output_str = table.concat(output)

    print(output_str)
end

function width_to_string(_num)
	local _out = ""
	for i = 0,_num+1 do
		_out ..= " "
	end
	return _out
end

function mspr(si, sx, sy, mag, flip_x, flip_y)
	local ms = myspr[si]
	mag = (mag) and mag or 1
	-- 1:i, 2:w, 3:h, 4:ox, 5:oy, 6:flip_x 7:flip_y
	sspr(ms[1], 0, 0, ms[2], ms[3], sx - ms[4]*mag, sy - ms[5]*mag, ms[2]*mag, ms[3]*mag, ms.flip_x or flip_x, ms.flip_y or flip_y)
	if ms.nextspr then
		mspr(ms.nextspr, sx, sy)
	end
end

function msprc(si, sx, sy)
	local ms = myspr[si]
	-- 1:i, 2:w, 3:h, 4:ox, 5:oy, 6:flip_x 7:flip_y
	rect(sx - ms[4], sy - ms[5], sx - ms[4] + ms[2] - 1, sy - ms[5] + ms[3] - 1, rnd({8,14,15}))
end
:: ui.lua
--[[pod_format="raw",created="2024-11-23 10:46:36",modified="2025-02-13 04:33:03",revision=736]]
function refresh_edit()
	menu = {}
	
	add(menu,{{
		text = "< " ..selected_sprite.." "..meta[selected_sprite][1].. " >",
		w = width_to_string(3+#tostr(selected_sprite)+#meta[selected_sprite][1]),
		cmd = "sprhead",
		x = 2,
		y = 2,
	}})
	local label = {"id:", "x:", "y:", "ox:", "oy:", "fx:", "fy:"}
	for i = 1, 7 do
		local s = tostr(data[selected_sprite][i])
		if s == nil then
			s = "[nil]"
		end
		
		add(menu,{
			{
				text = label[i],
				w = "    ",
				x = 2,
				y = 2+i*13,
			},
			{
				text = s,
				w = width_to_string(#s),
				cmd = "editval",
				cmdy = selected_sprite,
				cmdx = i,
				x = 17,
				y = 2+i*13,
			},
		})
	end
	
	local coltxt = meta[selected_sprite][2] == 0 and "off" or meta[selected_sprite][2]
	add(menu,{
		{
			text = "hitbox",
			w = width_to_string((#"hitbox" - 2)),
			x = 2,
			y = 2+8*13,
		},
		{
			text = coltxt,
			w = width_to_string((#tostr(coltxt) - 2)),
			cmd = "editcol",
			cmdy = selected_sprite,
			x = 35,
			y = 2+8*13,
		},
	})
	add(menu,{{
		text = "DELETE",
		w = width_to_string(6),
		cmd = "delspr",
		x = 2,
		y = 2+9*13,
	}})
end

function refresh_list()
	menu = {}
	for i = 1, #data do
		local row = {}
		add(row, {
				text = i .. " " .. meta[i][1],
				cmd = "editspr",
				cmdy = i,
				x = 2,
				y = -11 + 13 * i,
				w = width_to_string(#tostr(i)+#meta[i][1]),
		})
		add(menu, row)
	end
	add(menu,{{
		text = " + ",
		key = "_add",
		x = 2,
		y = -11 + 13 * (#data + 1),
		w = "   ",
		cmd = "newline",
		cmdx = j,
		cmdy = i,
	}})
end

function refresh_table()
	menu = {}
	for i = 1, #data do
		local row = {}
		add(row, {
				text = i,
				cmd = "",
				x = 2,
				y = -11 + 13 * i,
				w = "   ",
				c = 18,
			})
		for j = 1, #data[i] do
			add(row, {
				text = data[i][j],
				cmd = "edit",
				cmdx = j,
				cmdy = i,
				x = -43 + 32 * (j + 1),
				y = -11 + 13 * i,
				w = "      ",
			})
		end
		if cury == i then
			add(row, {
				text = " + ",
				cmd = "newcell",
				cmdy = i,
				x = -43 + 32 * (#data[i] + 2),
				y = -11 + 13 * i,
				w = "   ",
			})
		end
		add(menu, row)
	end
	add(menu,{{
		text = " + ",
		key = "_add",
		x = 2,
		y = -11 + 13 * (#data + 1),
		w = "   ",
		cmd = "newline",
		cmdx = j,
		cmdy = i,
	}})
end
:: update.lua
--[[pod_format="raw",created="2024-11-08 00:55:08",modified="2025-02-13 04:33:03",revision=2545]]
function update_edit()
	refresh_edit()
	
	curx = (cury == 1 or cury == 10) and 1 or 2
	wheel_y = ({mouse()})[5]
	
	--up
	if keyp("up") then
		cury = cury - 1
	end
	--down
	if keyp("down") then
		cury = cury + 1
	end
	cury = (cury-1) % (#menu) + 1
	cury = cury - wheel_y
	cury = mid(1, cury, #menu)
	
	if keyp("left") then
		selected_sprite -= 1
	end
	if keyp("right") then
		selected_sprite += 1
	end
	selected_sprite = mid(1, selected_sprite, #data)
	
	if keyp("x") then
		_drw = draw_list
		_upd = update_list
		curx = 1
		cury = selected_sprite
		refresh_list()
		return
	end
	
	if keyp("z") then
		mymenu = menu[cury][curx]
		if mymenu.cmd == "editval" then
			current_page = "edit"
			prev_upd = "update_edit"
			text_bar = spawntextbox()
			_upd = upd_type	
			text_bar:set_keyboard_focus(true)
			text_bar:set_text(tostr(data[mymenu.cmdy][mymenu.cmdx]))
			mymenu.data = tonum(mymenu.data)
		elseif mymenu.cmd == "editcol" then
			_upd = upd_type
			current_page = "edit"
			prev_upd = "update_col"
			text_bar = spawntextbox()
			text_bar:set_keyboard_focus(true)
			text_bar:set_text(tostr(meta[selected_sprite][2]))
			mymenu.data = tonum(mymenu.data)
		elseif mymenu.cmd == "sprhead" then
			_upd = upd_type
			current_page = "edit"
			prev_upd = "update_name"
			text_bar = spawntextbox()
			text_bar:set_keyboard_focus(true)
			text_bar:set_text(tostr(meta[selected_sprite][1]))
		elseif mymenu.cmd == "delspr" then
			deli(data,selected_sprite)
			deli(meta,selected_sprite)
			_drw = draw_list
			_upd = update_list
			curx = 1
			cury = 1
			refresh_list()	
		end
	end

	printh("cury: " .. cury .. ", curx: " .. curx)
	local curmenu = menu[cury][curx]
	
	if curmenu then
		if curmenu.y + scrolly > (200 - 30) then
			scrolly = scrolly - scrollspeed
		end
		if curmenu.y + scrolly < 22 then
			scrolly = scrolly + scrollspeed
		end
		scrolly = min(0, scrolly)
		
		camera(0,-scrolly)
	end
end

function update_list()
	refresh_list()
	
	wheel_y = ({mouse()})[5]
	
	--up
	if keyp("up") then
		cury = cury - 1
	end
	--down
	if keyp("down") then
		cury = cury + 1
	end
	cury = (cury-1) % (#menu) + 1
	cury = cury - wheel_y
	cury = mid(1, cury, #menu)
	
	local curmenu = menu[cury][curx]
	
	if curmenu then
		if curmenu.y + scrolly > (200 - 30) then
			scrolly = scrolly - scrollspeed
		end
		if curmenu.y + scrolly < 22 then
			scrolly = scrolly + scrollspeed
		end
		scrolly = min(0, scrolly)
		
		camera(0,-scrolly)
	end
	
	--left and right control zoom between 1-5x
	if keyp("left") then
		magnification -= 1
	end
	if keyp("right") then
		magnification += 1
	end
	magnification = mid(1,magnification,5)
	
	if keyp("z") then
		local mymenu = menu[cury][curx]
		if mymenu.cmd == "newline" then
			add(data,{0, 0, 0, 0, 0})
			add(meta,{"new",0})
		elseif mymenu.cmd == "editspr" then
			selected_sprite = mymenu.cmdy
			_upd = update_edit
			_drw = draw_edit
			cury = 1
		end
	end
end

function update_table()
	refresh_table()
	
	wheel_y = ({mouse()})[5]
	
	--up
	if keyp("up") then
		cury = cury - 1
	end
	--down
	if keyp("down") then
		cury = cury + 1
	end
	cury = (cury-1) % (#menu) + 1
	cury = cury - wheel_y
	cury = mid(1, cury, #menu)
	
	--left
	if keyp("left") then
		curx = curx - 1
	end
	--right
	if keyp("right") then
		curx = curx + 1
	end
	if cury < #menu then
		curx = (curx-2) % (#menu[cury]-1) + 2
	else
		curx = 1
	end
	
	local curmenu = menu[cury][curx]
	
	if curmenu then
		if curmenu.y + scrolly > (200 - 30) then
			scrolly = scrolly - scrollspeed
		end
		if curmenu.y + scrolly < 22 then
			scrolly = scrolly + scrollspeed
		end
		scrolly = min(0, scrolly)
		
		if curmenu.x + scrollx > (400 - 80) then
			scrollx = scrollx - scrollspeed
		end
		if curmenu.x + scrollx < 22 then
			scrollx = scrollx + scrollspeed
		end
		scrollx = min(0, scrollx)
		
		camera(-scrollx,-scrolly)
	end
	
	-- selecting a cell
	if keyp("z") then
		mymenu = menu[cury][curx]
		-- editable cell selected
		if mymenu.cmd == "edit" then
			current_page = "edit"
			text_bar = spawntextbox()
			_upd = upd_type	
			text_bar:set_keyboard_focus(true)
			text_bar:set_text(tostring(mymenu.text))
			mymenu.data = tonum(mymenu.data)
		-- newline cell selected
		elseif mymenu.cmd == "newline" then
			add(data, { 0 })
		elseif mymenu.cmd == "newcell" then
			add(data[mymenu.cmdy],0)
		end
	end
end

function upd_type()
	-- no need to check for input if we're typing
end

function spawntextbox(_i)
	local enter_mode = _i
	local editval
	local text_bar = modify_text_display:attach_text_editor{
		x = mymenu.x+14+scrollx, y = mymenu.y-1+scrolly,
		width = 50,
		height = 12,
		margin_top = 2,
		key_callback = {
			enter = function(enter_mode)
				editval = text_bar:get_text()[1]
				if (editval == "") and prev_upd ~= "update_name" then
					editval = 0
				end
				removeAllChildren(modify_text_display)
				current_page = nil
				if prev_upd == "update_edit" then
					data[mymenu.cmdy][mymenu.cmdx] = (editval) and editval or 0	
				elseif prev_upd == "update_col" then
					meta[selected_sprite][2] = (tonum(editval) > 1) and tonum(editval) or 0
				elseif prev_upd == "update_name" then
					meta[selected_sprite][1] = editval
				end		
				_upd = update_edit
			end
		}
	}
	return text_bar
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAxOjQ4OjI1Iixtb2RpZmllZD0iMjAyNS0w
Mi0xMyAwNDozMzowMyIscnVudGltZT0xMSx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzEzIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJkcmF3Lmx1YSM0MyIsd29ya3NwYWNl
X2luZGV4PTF9LHtsb2NhdGlvbj0idXBkYXRlLmx1YSMyMjQiLHdvcmtzcGFjZV9pbmRleD0xfSx7
bG9jYXRpb249InRvb2xzLmx1YSMxMzMiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249Imlv
Lmx1YSM2Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJ1aS5sdWEjMzciLHdvcmtzcGFj
ZV9pbmRleD0xfSx7bG9jYXRpb249ImdmeC8wLmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9LHtsb2Nh
dGlvbj0ibWFwLzAubWFwIix3b3Jrc3BhY2VfaW5kZXg9M30se2xvY2F0aW9uPSJzZngvMC5zZngi
LHdvcmtzcGFjZV9pbmRleD00fX1dXQ==
:: [eoc]
