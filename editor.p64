picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTEzIDIxOjI5OjAxIixtb2RpZmllZD0iMjAyNC0x
MS0xOCAyMToyMzowNiIscmV2aXNpb249MTQ0MF1dbHo0ALENAADJPgAA8yF7WzBdPXtibXA9cHh1
AEMgEBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIANd5PTAsem9vbT0xMn0sPwDwCgcH
BBAnIAcvHgcABx4PFx4XDg0HDQ4XHg0RAF8uByAnEE8AJkAODxcOSwAQB1UAPw4NDlEAIv8GBgcE
EBogChcKEAoXCgAKNwq3ADcAQgAasQoJBDAZMAkACQAZBADQGRoZAAkQCQoXCgkQCVIAzwAJCgBX
AAqXAHcgV50AG9AQDARQCRAJsAkQCZAJVQBgAAlACRAJFABwEAkwOTAJIGkAIRAKEACRAAkACQoH
EAcKiwD-CCAKBzAHCiAZIApQCiAJ8AEJsAkgCZAJgAAcvwoEAAmwCfBxCdAJOQAbTxAE8PAyABry
Hg8SBFAfF7AOEQ6QDgEHBgEOgA4hDQEOYA4BLBEOUA4BDBccEQ5ADgEMBwwBDAoAUSEMIQ4wCADA
AQcBDiAOERwBBxEGCgDwDwENAQwHEQ0GDQEOAA4BLSENBg0HDQEeAR0GLQYNFgoAkQ0GBxYHBg0G
HSIAgAcGDQEGBw0hOwBABREVDWAAX2EOYG4w9QAb8QISBGAfF8AOEQ6gDgEGBwEOkMMAEXDDABNg
wwAXUMMAExHDABURwwByAQYBHBEHAcUAYwYNAQwXEcUAUD0xHQYHwwBQFj0GDRbCABcWwgBhEQcd
EQcxNQAiFQHAAE9xDmB_wAAb8AQSEgRwHxfgDhEOwA4BFgEOoA5RjQEQPIwB8gYBDBcsAQ5gHgEM
BxwBDAEeQA4hDDGAAUEHAQwxvwB1MA4BBhEHEYQBRQYNEReFAQCrAFENMQ0GDcYAcSYNBj0GDSaT
AQmLAVAxBwEWAcoA-wMeAQYBBREFAQYBHlAOcQ6AfkCMAScCTwJwAQ0hDoAOEccAoQ4RDBccAQ5Q
DhGMASABDs8AMyEMEc8AAwoAUAYBBxEcjAEQEM0AYxEXDAENBswAxh0xPQEeARYNBj0WHcUAIhYN
wwBAER0HEZACbw0VARUGAYwBIhEPwAADDwMhBgdGAkENIQ5wwAATUMAAFUDAABEwwAAVAcAABI0B
MgEcEb4AUg0RBwwBigFxDQcNBg0hLUMCWA0GLQYdhgEAIgBAIQ0HBiEDEgHEAD4RBQEPAw8EBBUP
MgCwTwEBBAcxABq-AwMEAAcABwwHAAdKBhsgAwY5AF83DCcwB6gFGyIDCDkAERc7AA89ACIwZwwX
sQAQEAQAD4MBfvIQCBAEIBlQGUAJFwkwCRcJIAk3CRAJNwkACQcKFwoHGQYAMRoXGgQA-wYKCRoJ
CjkaWRo5ADkAGRAZEAkgGSBvABrxAQYQBBAZMBkwGSAJGgkQCRcEABAA0gcTGQQAYCkaORr5BfEH
LxAZLwEbMQQQBJUAAQIA0AAJGhkXGRcZGhka_QEXAA96CBzQCgQwF1BXIHcQdwD3Dl8IL0A36gAM
GThBAPEHDA4EQBeQF5AXYAcQFxAHIBcANwAXEAYA-wQgdxAHAHcAxwCXIHcwd0BXYDcwWgAZYQ4N
BCAHUAIA-xPwBxewF1AHQBdABwAHIDcgB0BXcFdABxBXEAdAV4A3oBdQWQAZQBAOBDBVAGE0B9AH
8CFWAJ9wF8A3sDfAF2BIAAwPhQIdDTEA8QAQHhA_EB4gDhEeNB4RDgCiB0AEPw8EGAbxCB4BDQEE
HAcsBAENAR4RAgQMBxwJDAQCJwBxCAQsGQwECH4F8Q4CDgQMOQwEDgIBHgEYBAc5BwQYAR4BAg4I
BDcECBYAkAIIDgw0DA4IAkgAcQgCDB4MAghIAGQRAg48DgJ5ADMSGBJ4AP8EITIhDQEeIR4xHiEO
AC4QPhAuANkAGYASEQRgPqAuNB0HAM4AkT5ADgEEHQctBA8JkwIEDQcdCQ0EAgkHpAgELRkNBAgB
Dw3PAEMNOQ0ElwAE0QAAKQAG0wABDgBQCA4NNA3VAAAoAKIGAQIIAg0eDQIIHgBQDBECDj1EAEAQ
DiEO2gCwEQ4wLgAOATIBDAb7Br9RDAEOgE4RDuAeMNoAHmKwHjQegA6oASMOYNsAANIGB9sAJg4w
2QAnDiDWAAKuAAPXAABtASUPDdgAEQygAQPXAAKgAQTVAEMRDhAe0wDwBh4wDhESERIRDmAeERYR
HpAOARwBDpgIP_AecLACHg8xAP----------------------xl8ICATwMJMAHg_NBf------TDF8
AQwCAC-8ITkAHCP8IToAH3w5ABzvISxRLFE8QTxBPFEsUSx3AB2TawErQSsBBh0BBQCfNisBDREN
OzF7SAAcoRFbBjErBhEWARsFAK9GARsdEQ0BG0GrSAAcUfsJCQobAwA0KQobCwA-IwqLRwAcS4FH
BhEDAD8HRgFFABzRHTUtBTYFHQUGFQYFHQoAIAcsBQBiHRUdBQcWBQAfDVQAICEGLVUAEA0GABQt
VgBvNgUdVS1FTwAdIgtpAgAiG1kCAA8-ABwDNgATG0YAHws-ABz-AfEEBh1BBh1BNjENEA0xMHE-
ABxwcQZhBhEWIQQAj0YhHRANIUChQgAc75FXEVcRVhFWEQ0QLSFAgAAdcQEGTREHNg0EAP8CXRFc
EQ0FFgUNEQANFQ0AEVAtAh0TDRgCCB0CFh0UAD9lHVVRABxAC5MLAwIAL-sfOQAcYFMbAyszOzoA
Hxk6ABwv_TAxAByyuzQbFDkbBEkLBFlCAg9AAB0-dPkcMwAcv3s0OzkUG0kEG1kEtQIjwL0FDRUt
BQEFER0FAQIA3x0RBSENFUENAQVBDWFMAB2pFQ0lDQURBSEFAQIAL-EHSQAckX0VDQU9EQUBBZoA
EAWUAM8FDTEFAR0xBQEFDWEXBB3xAwUNFQ0VHRUNBQ0GBR0VDQYlHfUA-wINFQYVHQYFBgUNBQ01
PQUtBVgAHS-4MKAEKC87OVUGHT-5JLsyABwDbwAQC9UELzm7wwMeMFENYQIArx0FQR1RPQEFEX1C
ABx-8R4FEQURvTYAHDBhDVHkAb9BBR1RHSEFDQEdAUQAHy-4MDEATR-7MQAeYwoDCwMrA8YEHwk_
ABzFA2ELA0EHA1EHCwNRCgARQQQAD0oAHJtBAxtRAwtBAxsJAA9HABz-CPsBQRsBBxEXAQsBBwEX
IQNhAwETAQMR1AId-w6LIUsBBxE7AQchKxEHAQcBGwEDAQcRKwNBKwELEZQAHRIrYgHxAHM1AyUU
BQQFBAUkBaQCBAIAH3RLABz-CwsDSyNLAwUTCwMLEwQFQwUURQIUUiRCNCIESQAcYBsDGwMLIxwB
X-EZNwEXSAcdcPEZEwETARNGAA-1CR2A8QcDURNRAwt8ADABAwuIAE8BE0sB6gEewPEAA2ETUQsD
URMRE0gAjwEDCxMbAwFLRwAc8QD7AkEbARcRBzEXAQdxAxEvAg8uAh2AuyE7EQcBKyEoAv8DBwEH
ERsRBwEDAQtBAysRAwErTQAcAxoCEhQIAB8SDgAIIpIECAAPYQAjEDQGAP8GMhYFAgQSBiUyNQIE
IhUiBEIEAgRSUQAdMgtTC8gBgBNbA3sDWwMLBAAAowIQM6cCD00AHJDrAVsBA0sBA1sDACETSwYA
D0MAHEB7AWsDAwBxSxMBWwMBWwkADxcCHVBzAVMRA6ECMBEDUV0CsRQBAxsDARIBMwESCgAfE7EC
Hy_DWyABMf8E_wADWyM7EwsDOwMbAztDKwMbU4kAHW-yCHF8cXyICx3AIhQyRCIUQgEEQgEMqSdQ
AVwBDFEGAA9aASsREbkDAA4AERt_AxELGgAP0wAd-wNLARNbAQNrAVsDAlsDAmsD_wBBABz-AhMB
SwMBWwFrAgNbAgNbA-sHQAAe-wYTASMBMwEDAVMBAlMSUwITOyNbA3scASa-BFEEIhQiEzJDEiNF
ACkwAyIUXwGvIgEDCyMSARMLM7cCHwDcAxE7qgJvJTMFJDVEvAYm8AIhIjECBBIRDAIEMhxSDAEM
MkgREDxOEV8xDCE8EUcCKBAEoQNAIhMBIj4CbxIjCwMBM_YAHR-8OAkdb-wKJwwH-LYAHX-8EQcM
J-wKNgAc8AxrBVsFDEsFBw07BQ0GDSsVDQYNGwUtBg0LBR0RABEFAgAfBicMHU91fP0gMwAcgAVr
DQVbHQVLcQBgOw0VDQUrWg2vGw01DQULDUUNBU8AHBLxiA0jARUIAD-1APO4Ax1v8xALUxvTBAUh
bwMSIxLzEDcAHP8C_wsFKwUtBS0FKwUrBSMFIwWdAx0v8TAlDh4jBQ3lAVMtBg0FLQwADxQACg8L
Ah4f-ZYAHSoNZQIADz8AHG_NFQ0F-SN8ASEAfgHfKw0DGwUrDSMFKwUDK0UAH687LQVrDTsjDQNb
PwAg8AAHASsFGwEDLQUNAQM7BQtYBS8FA8AKIz8hV4EMAh_CLQcMBS0FBiU1ECAFDScQEBYMACAN
JgsAfzYVDUYFDVZYABxffHV99hg0ABz-BAflHVUWDUUmDTU2DSVGDRVWDQV2AB9wJh1GDRYNNgQA
Lz2WPwAcUSsFA1sNAwA6BQMbGAIfe0sAKCErLQ0ATysjDQMWFx4QAHYKAKYCIAsDJBIjEwELAD8j
BQuZDB9EKwUTS5UAF1sMAA_zAh05CwVWAwBfZQtjC2NEABw-9hh1mgUeOFYFCwMAAXcADyQDHSOW
PRwCD38ADFBtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAxOjQ4OjI1Iixtb2RpZmllZD0iMjAyNC0x
MS0xOCAyMToyMzowNiJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAwOjUxOjM1Iixtb2RpZmllZD0iMjAyNC0x
MS0xOCAyMToyMzowNiIscmV2aXNpb249NjU2XV1sejQAaAAAAFgQAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDMyAwAvIjABAP--------------------vxCCIpLGhpZGRlbj1mYWxzZSxwYW5feD0w
CADSeT0wLHRpbGVfaD0xNgoAEHcKAIB6b29tPTF9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAxOjQ4OjI1Iixtb2RpZmllZD0iMjAyNC0x
MS0xOCAyMToyMzowNiJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAwOjUxOjM1Iixtb2RpZmllZD0iMjAyNC0x
MS0xOCAyMToyMzowNiIscmV2aXNpb249NjU3XV1sejQAoAAAAAsKAAD-MHB4dQADKAAABAAED0AQ
Ag4AAaABIAKgDgAPEAAN8MoBAgNADw_QBAUGB0AMkAgJCgtADJAPDA8NDw4MQAzw-wEA6-8nqgEQ
Bg8gEAEgASAB8AACEAIOEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYOMAD-----
-70f-wEArM-ID0AADxBA--_w8P8BAP-qUP----8p
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAxOjQ4OjI1Iixtb2RpZmllZD0iMjAyNC0x
MS0xOCAyMToyMzowNiJdXQ==
:: draw.lua
--[[pod_format="raw",created="2024-11-08 00:54:54",modified="2024-11-18 21:23:06",revision=875]]
function draw_table()
	cls(2)

	if menu then
		for _i = 1, #menu do
			for _j = 1, #menu[_i] do
				-- change color if cell is currently selected
				local _c = 13
				if _i == cury and _j == curx then
					_c = 7
				end
				
				-- make copy of local cell we're working with
				local mymenu = menu[_i][_j]
				
				-- print background of cell
				printh(mymenu.text)
				bgprint(mymenu.w, mymenu.x+scrollx, mymenu.y+scrolly, _c) --*****
				
				-- intermediary value for formatting output
				-- defaults to nk for "no key" if no key can be found
				local _out = (mymenu.key) and mymenu.key or "nk"
				
				-- prints output text
				if mymenu.key == "_add" then
					print(mymenu.text, mymenu.x+scrollx, 1+mymenu.y+scrolly, _c)
				else
					print(_out .. ": " .. mymenu.text, mymenu.x+scrollx, 1+mymenu.y+scrolly, _c)
				end
			end
		end
	end
end

function refresh_table()
	menu = {}
	i, j = 1, 1
	for _i, _v in pairs(data) do
		local row = {}
		for _index, _value in pairs(_v) do
			add(row, {
				text = _value,
				key = _index,
				cmd = "edit",
				cmdx = j,
				cmdy = i,
				x = -35 + 37 * j,
				y = -11 + 13 * i,
				w = "       "
			})
			j = j + 1
		end
		-- after data is iterated through to generate
		-- a menu but before adding it to the menu
		
		if i == cury then
			add(row,{
				text = "   +   ",
				key = "_add",
				cmd = "newcell",
				cmdx = j,
				cmdy = i,
				x = -35 + 37 * j,
				y = -11 + 13 * i,
				w = "       ",
			})
		end
	
		add(menu, row)
		i = i + 1
		j = 1
	end
	add(menu,{{
		text = "   +   ",
		key = "_add",
		x = 2,
		y = -11 + 13 * i,
		w = "       ",
		cmd = "newline",
	}})
	
--	debug[3] = menu[cury][curx]["x"]
end


:: input.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAzOjQ5OjI4Iixtb2RpZmllZD0iMjAyNC0x
MS0wOCAwNDowNjozOCIscmV2aXNpb249MV1dbHo0ABcAAAAVAAAA8AZ7ezAsMSwyLDN9LHs0LDUs
Niw3fX0=
:: io.lua
--[[pod_format="raw",created="2024-11-08 01:03:28",modified="2024-11-18 21:23:06",revision=682]]
-- warning, export overwrites all of output_file every time it's used!
-- can store everything directly as variables, a lot of interesting uses i can think of

function export()
	store(output_file,data)
end
:: main.lua
--[[pod_format="raw",created="2024-11-08 00:51:35",modified="2024-11-18 21:23:06",revision=776]]
include("draw.lua")
include("update.lua")
include("tools.lua")
include("io.lua")

function _init()
	modify_text_display = create_gui()
	
	window{width = 200, height = 200}
	
	input_file = "myspr.pod"
	output_file = "out.pod"
	array_name = "myspr" -- is this array_name needed?
	data = fetch(input_file)

	debug = {}
	_drw = draw_table
	_upd = update_table
	menuitem(1, "export", export)
	
	curx = 1
	cury = 1
	scrolly = 0
	scrollx = 0
	
--	data = {}
--	for i=1,30 do
--		local _row = {}
--		for j = 1, i do
--			add(_row,j)
--		end
--		add(data,_row)
--	end
end

function _draw()
	_drw()
	
	if current_page == "edit" then
		modify_text_display:draw_all()
	elseif current_page == "newline" then
		modify_text_display:draw_all()
	end
	
	-- debug --
	cursor(4, 4)
	color(8)
	for txt in all(debug) do
		print(txt)
	end
end

function _update()
	_upd()
	modify_text_display:update_all()
--	debug[1] = "curx: " .. curx
--	debug[2] = "cury: " .. cury
end

:: myspr.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA5IDAwOjI4OjA2Iixtb2RpZmllZD0iMjAyNC0x
MS0wOSAwMDoyODozOSIscmV2aXNpb249MV1dbHo0AEABAACmAgAA9Ax7e2g9MTgsaT04LG94PTUs
b3k9OCx3PTE1fSwaABA5GgAVNxoAFjYaACAxMBsAFTgbABc4GwAfMTYABxoyNgADawBgNixpPTI0
GwAQMxsAVzAsdz04GgAQNRoAFDIaABc2GgAQNhoAFDEaABI0GgAQMBoAFTfUABA5aQASMBsAEDQb
AAHvABA2GwAgMTMcABIyHAAQMxwABvEAIDEyHAAWNDgAFjPyACcxM9gAANcAAW4AFDCIABExGQAA
UAApMTihABEzGQAAugAvMTkZAAAAIgEvMjAZAAUfMRkAAAEGARszVQEDcAEQNxsAEDMbABw5pgEB
GwAfNBsAAQAaABUxiQEA5wAVNxgAHzIYAAQVMxgABp8BVTksaT00gwEXMoMBMDIsaRUAA7EAFzWx
AAAaABU2nAGANix3PTEyfX0=
:: out.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDA0OjAxOjE4Iixtb2RpZmllZD0iMjAyNC0x
MS0wOCAwNDoyMDoxOSIscmV2aXNpb249MV1dbHo0ABcAAAAVAAAA8AZ7ezAsMSwyLDN9LHs0LDUs
Niw3fX0=
:: test.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAzOjI1OjQ0Iixtb2RpZmllZD0iMjAyNC0x
MS0wOCAwMzo1MDo0MCIscmV2aXNpb249MTddXWx6NAAJAAAACAAAAIB7Nyw4LDEwfQ==
:: test.txt
--[[pod_format="raw",created="2024-11-08 02:37:45",modified="2024-11-08 02:37:49",revision=2]]
test="useful data"
:: tools.lua
--[[pod_format="raw",created="2024-11-08 00:58:52",modified="2024-11-18 21:23:06",revision=667]]
function bgprint(txt,x,y,c)
	print("\#0"..txt,x,y,c)
end

function removeAllChildren(el)
	for child in all(el.child) do
		el:detach(child)
	end
end
:: update.lua
--[[pod_format="raw",created="2024-11-08 00:55:08",modified="2024-11-18 21:23:06",revision=854]]
function update_table()
	refresh_table()
	
	--up
	if keyp("up") then
		cury = cury - 1
	end
	--down
	if keyp("down") then
		cury = cury + 1
	end
	cury = mid(1,cury,#menu)
	
	--left
	if keyp("left") then
		curx = curx - 1
	end
	--right
	if keyp("right") then
		curx = curx + 1
	end
	curx = mid(1,curx,#menu[cury])
	
	local curmenu = menu[cury][curx]
	if curmenu.y + scrolly > (200 - 30) then
		scrolly = scrolly - 1
	end
	if curmenu.y + scrolly < 22 then
		scrolly = scrolly + 1
	end
	scrolly = min(0, scrolly)
	
	if curmenu.x + scrollx > (200 - 80) then
		scrollx = scrollx - 1
	end
	if curmenu.x + scrollx < 22 then
		scrollx = scrollx + 1
	end
	scrollx = min(0, scrollx)
	
	-- selecting a cell
	if keyp("z") then
		mymenu = menu[cury][curx]
		-- editable cell selected
		if mymenu.cmd == "edit" then
			current_page = "edit"
			text_bar = spawntextbox()
			_upd = upd_type	
			text_bar:set_keyboard_focus(true)
			text_bar:set_text(tostring(mymenu.text))
		-- newline cell selected
		elseif mymenu.cmd == "newline" then
			current_page = "newline"
			text_bar = spawntextbox() -- we should abstract this some
			--[[
				spawntextbox() returns a gui object with a textbox attached to it
				we could parametize things about the box like size
				we could have a table we pass in which gets treated by reference in lua
				by prepopulating a table with a lot of values, we could limit input 
				of this to what we think we'd need to pass in
				off the top of my head i think that means we'd need a prompt string
				and a way to point at the right object in the table
			]]
			_upd = upd_type
		-- new column cell selected
		elseif mymenu.cmd == "newcell" then
		
		end
	end
end

function upd_type()

end

function spawntextbox()
	local text_bar = modify_text_display:attach_text_editor{
		x = mymenu.x+14, y = mymenu.y-1,
		width = 21,
		height = 12,
		margin_top = 3,
		
		key_callback = {
			enter = function()
				local editval = tonum(text_bar:get_text()[1])
				--[[
				local _input = {
					text = 0,
					key = _input_key,
					cmd = "edit",
					cmdx = j,
					cmdy = i,
					x = -35 + 37 * j,
					y = -11 + 13 * i,
					w = "       "
				}
				add(data,{_input})
				]]
				data[mymenu.cmdy][mymenu.key] = (editval) and editval or 0
				removeAllChildren(modify_text_display)
				current_page = nil
				_upd = update_table
			end
		}
	}
	return text_bar
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA4IDAxOjQ4OjI1Iixtb2RpZmllZD0iMjAyNC0x
MS0xOCAyMToyMzowNiIscnVudGltZT0xMSx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzU2Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJkcmF3Lmx1YSM3OCIsd29ya3NwYWNl
X2luZGV4PTF9LHtsb2NhdGlvbj0idXBkYXRlLmx1YSM2NSIsd29ya3NwYWNlX2luZGV4PTF9LHts
b2NhdGlvbj0idG9vbHMubHVhIzUiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImlvLmx1
YSM2Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJnZngvMC5nZngiLHdvcmtzcGFjZV9p
bmRleD0yfSx7bG9jYXRpb249Im1hcC8wLm1hcCIsd29ya3NwYWNlX2luZGV4PTN9LHtsb2NhdGlv
bj0ic2Z4LzAuc2Z4Iix3b3Jrc3BhY2VfaW5kZXg9NH19XV0=
:: [eoc]
