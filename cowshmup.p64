picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTEzIDIxOjI5OjAxIixtb2RpZmllZD0iMjAyNC0x
MS0yMCAyMjoxNDo0MSIscmV2aXNpb249ODM3XV1sejQAsQ0AAMk_AADzIXtbMF09e2JtcD1weHUA
QyAQEATwVgcQB8AX0BfABxAH8FYsZmxhZ3M9MCxwYW5feAgA13k9MCx6b29tPTEyfSw-APAKBwcE
ECcgBy8eBwAHHg8XHhcODQcNDhceDREAXy4HICcQTwAmQA4PFw5LABAHVQA-Dg0OUQAi-wYGBwQQ
GiAKFwoQChcKAAo3CrcANwBCABqxCgkEMBkwCQAJABkEANAZGhkACRAJChcKCRAJUgDPAAkKAFcA
CpcAdyBXnQAb0BAMBFAJEAmwCRAJkAlVAGAACUAJEAkUAHAQCTA5MAkgaQAhEAoQAJEACQAJCgcQ
BwqLAP8IIAoHMAcKIBkgClAKIAnwAQmwCSAJkAmAABy-CgQACbAJ8HEJ0Ak5ABtPEATw8DIAGvIe
DxIEUB8XsA4RDpAOAQcGAQ6ADiENAQ5gDgEsEQ5QDgEMFxwRDkAOAQwHDAEMCgBRIQwhDjAIAMAB
BwEOIA4RHAEHEQYKAPAPAQ0BDAcRDQYNAQ4ADgEtIQ0GDQcNAR4BHQYtBg0WCgCRDQYHFgcGDQYd
IgCABwYNAQYHDSE7AEAFERUNYABfYQ5gbjD1ABvxAhIEYB8XwA4RDqAOAQYHAQ6QwwARcMMAE2DD
ABdQwwATEcMAFRHDAHIBBgEcEQcBxQBjBg0BDBcRxQBQPTEdBgfDAFAWPQYNFsIAFxbCAGERBx0R
BzE1ACIVAcAAT3EOYH7AABvwBBISBHAfF_AOEQ7ADgEWAQ6gDlGNARA8jAHyBgEMFywBDmAeAQwH
HAEMAR5ADiEMMYABQQcBDDG-AHUwDgEGEQcRhAFFBg0RF4UBAKsAUQ0xDQYNxgBxJg0GPQYNJpMB
CYsBUDEHARYBygD-Ax4BBgEFEQUBBgEeUA5xDoB_QIwBJwJPAnABDSEOgA4RxwChDhEMFxwBDlAO
EYwBIAEOzwAzIQwRzwADCgBQBgEHERyMARAQzQBjERcMAQ0GzADGHTE9AR4BFg0GPRYdxQAiFg3D
AEARHQcRkAJvDRUBFQYBjAEiEQ-AAAMPAyEGB0YCQQ0hDnDAABNQwAAVQMAAETDAABUBwAAEjQEy
ARwRvgBSDREHDAGKAXENBw0GDSEtQwJYDQYtBh2GAQAiAEAhDQcGIQMSAcQAPhEFAQ8DDwQEFQ8y
ALBPAQEEBzEAGr8DAwQABwAHDAcAB0oGGyADBjkAXzcMJzAHqAUbIgMIOQARFzsADz0AIjBnDBex
ABAQBAAPgwF_8hAIEAQgGVAZQAkXCTAJFwkgCTcJEAk3CQAJBwoXCgcZBgAxGhcaBAD-BgoJGgkK
ORpZGjkAOQAZEBkQCSAZIG8AGvEBBhAEEBkwGTAZIAkaCRAJFwQAEADSBxMZBABgKRo5GvkF8Qcv
EBkvARsxBBAElQABAgDQAAkaGRcZFxkaGRr5ARcAD3oIHNAKBDAXUFcgdxB3APcOXwgvQDfqAAwZ
OEEA8QcMDgRAF5AXkBdgBxAXEAcgFwA3ABcQBgD-BCB3EAcAdwDHAJcgdzB3QFdgNzBaABlhDg0E
IAdQAgD-E-AHF7AXUAdAF0AHAAcgNyAHQFdwV0AHEFcQB0BXgDegF1BZABlAEA4EMFUAYTQH0Afw
IVYAn3AXwDewN8AXYEgADA_FAh0NMQDxABAeED4QHiAOER40HhEOAKIHQAQ-DwQYBvEIHgENAQQc
BywEAQ0BHhECBAwHHAkMBAInAHEIBCwZDAQIfgXxDgIOBAw5DAQOAgEeARgEBzkHBBgBHgECDggE
NwQIFgCQAggODDQMDggCSABxCAIMHgwCCEgAZBECDjwOAnkAMxIYEngA-wQhMiENAR4hHjEeIQ4A
LhA_EC4A2QAZgBIRBGA_oC40HQcAzgCRPkAOAQQdBy0EDwmTAgQNBx0JDQQCCQekCAQtGQ0ECAEP
Dc8AQw05DQSXAATRAAApAAbTAAEOAFAIDg00DdUAACgAogYBAggCDR4NAggeAFAMEQIOPUQAQBAO
IQ7aALARDjAuAA4BMgEMBvsGv1EMAQ6AThEO4B4w2gAeYrAeNB6ADqgBIw5g2wAA0gYH2wAmDjDZ
ACcOINYAAq4AA9cAAG0BJQ8N2AARDKABA9cAAqABBNUAQxEOEB7TAPAGHjAOERIREhEOYB4RFhEe
kA4BHAEOmAg-4B5wsAIeDzEA-----------------------GXwgIBPAwkwAeD40F------9MMXwB
DAIAL-whOQAcI-whOgAffDkAHO8hLFEsUTxBPEE8USxRLHcAHZNrAStBKwEGHQEFAJ82KwENEQ07
MXtIAByhEVsGMSsGERYBGwUAr0YBGx0RDQEbQatIABxR_wkJChsDADQpChsLAD8jCotHABxLgUcG
EQMAPwdGAUUAHNEdNS0FNgUdBQYVBgUdCgAgBywFAGIdFR0FBxYFAB8NVAAgIQYtVQAQDQYAFC1W
AG82BR1VLUVPAB0iC2kCACIbWQIADz8AHAM2ABMbRgAfCz8AHP8B8QQGHUEGHUE2MQ0QDTEwcT8A
HHBxBmEGERYhBACPRiEdEA0hQKFCABzvkVcRVxFWEVYRDRAtIUCAAB1xAQZNEQc2DQQA-wJdEVwR
DQUWBQ0RAA0VDQARUC0CHRMNGAIIHQIWHRQAP2UdVVEAHEALkwsDAgAv_x85ABxgUxsDKzM7OgAf
GToAHC-5MDEAHLK7NBsUORsESQsEWUICD0AAHT90_RwzABy-ezQ7ORQbSQQbWQS1AiPAvQUNFS0F
AQURHQUBAgDfHREFIQ0VQQ0BBUENYUwAHakVDSUNBREFIQUBAgAv8QdJAByRfRUNBT0RBQEFmgAQ
BZQAzwUNMQUBHTEFAQUNYRcEHfEDBQ0VDRUdFQ0FDQYFHRUNBiUd9QD-Ag0VBhUdBgUGBQ0FDTU9
BS0FWAAdL-gwoAQoLzs5VQYdP-kkuzIAHANvABAL1QQvObvDAx4wUQ1hAgCvHQVBHVE9AQURfUIA
HH-xHgURBRG9NgAcMGENUeQBv0EFHVEdIQUNAR0BRAAfL-gwMQBNH-sxAB5jCgMLAysDxgQfCT4A
HMUDYQsDQQcDUQcLA1EKABFBBAAPSgAcm0EDG1EDC0EDGwkAD0cAHP8I_wFBGwEHERcBCwEHARch
A2EDARMBAxHUAh3-DoshSwEHETsBByErEQcBBwEbAQMBBxErA0ErAQsRlAAdEitiAfEAczUDJRQF
BAUEBSQFpAIEAgAfdEsAHP8LCwNLI0sDBRMLAwsTBAVDBRRFAhRSJEI0IgRJABxgGwMbAwsjHAFf
8Rk3ARdIBx1w8RkTARMBE0YAD-UJHYDxBwNRE1EDC3wAMAEDC4gATwETSwHqAR7A8QADYRNRCwNR
ExETSACPAQMLExsDAUtHABzxAPsCQRsBFxEHMRcBB3EDES8CDy4CHYC7ITsRBwErISgC-wMHAQcR
GxEHAQMBC0EDKxEDAStNABwDGgISFAgAHxIOAAgikgQIAA9hACMQNAYA-wYyFgUCBBIGJTI1AgQi
FSIEQgQCBFJRAB0yC1MLyAGAE1sDewNbAwsEAACjAhAzpwIPTQAckOsBWwEDSwEDWwMAIRNLBgAP
QwAcQHsBawMDAHFLEwFbAwFbCQAPFwIdUHMBUxEDoQIwEQNRXQKxFAEDGwMBEgEzARIKAB8TsQIf
L4NbIAEx-wT7AANbIzsTCwM7AxsDO0MrAxtTiQAdb-IIcXxxfIgLHcAiFDJEIhRCAQRCAQypJ1AB
XAEMUQYAD1oBKxERuQMADgARG34DEQsaAA-TAB3-A0sBE1sBA2sBWwMCWwMCawP7AEEAHP8CEwFL
AwFbAWsCA1sCA1sD_wdAAB7-BhMBIwEzAQMBUwECUxJTAhM7I1sDexwBJr8EUQQiFCITMkMSI0UA
KTADIhRfAa8iAQMLIxIBEwsztwIfANwDETuqAm8lMwUkNUS8BibwAiEiMQIEEhEMAgQyHFIMAQwy
SBEQPE4RXzEMITwRRwIoEAShA0AiEwEiPgJvEiMLAwEz5gAdH-w4CR1v-AonDAf8tgAdf-wRBwwn
-Ao2ABzwDGsFWwUMSwUHDTsFDQYNKxUNBg0bBS0GDQsFHREAEQUCAB8GJwwdT3V8-SAzAByABWsN
BVsdBUtxAGA7DRUNBStaDa8bDTUNBQsNRQ0FTwAcEvGIDSMBFQgAP-UA87gDHW-zEAtTG9MEBSFv
AxIjEvMQNwAc-wL7CwUrBS0FLQUrBSsFIwUjBZ0DHS-xMCUOHiMFDeUBUy0GDQUtDAAPFAAKDwsC
Hh-9lgAdKg1lAgAPPwAcb40VDQX9I3wBIQB_Ad8rDQMbBSsNIwUrBQMrRQAfrzstBWsNOyMNA1s-
ACDwAAcBKwUbAQMtBQ0BAzsFC1gFLwUDwAojPyFXgQwCH4ItBwwFLQUGJTUQIAUNJxAQFgwAIA0m
CwB-NhUNRgUNVlgAHF98dX32GDQAHP8EB_UdVRYNRSYNNTYNJUYNFVYNBXYAH3AmHUYNFg02BAAv
PZY-ABxRKwUDWw0DADoFAxsYAh97SwAoISstDQBPKyMNAxYXHhAAdgoApgIgCwMkEiMTAQsAPyMF
C5kMH0QrBRNLlQAXWwwAD7MCHTkLBVYDAF9lC2MLY0QAHD-2GHWaBR44VgULAwABdwAPJAMdI5Y9
HAIPfwAMUG09OH19
:: gfx/enemy-01.png
b64$iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8-9hAAAAAXNSR0IArs4c6QAAAYFJREFU
OI2NkzFLw1AUhb_Ekr-QyW7Bwf_gs1g7SFIqnbKIcwkEuoQsQqB0li6dgpWELG3pXP_DiGTTxd_Q
oXF4vfGl7eCBQN5955y8e3OewR5VsKgAjHhg6GvBYV3WdbGzSgH46roAZMVU1_PYIwB0nhEPjJaI
k2ef7fKdziplev6NM-YbBtnThNHnGQ8311zdXtB5nFAFi6olhO3yndl60xTbl1C8qROMfXiaMFpv
GsamvMzWG7xS29HEfPTrslcqbm1gxAND_o4KzeGEWOfIDEyZgVcCwfCP_dE-EoPieKUaZhUsqrqF
qCghTv6OfwipxUnjpLVBaFsQDHHyNpnXg95P48m8Hk7ehmCouHu00BEnysQ1lYkGZ_yDvVOcUwZz
C7AtojghzC2iFx-Sndp0TcL7V6KiJLQtxd3jKIleCdGdC65JA_mOME9rsfwF4zCJeh5kWNLz3KJO
4vBxwlfX5SiJQvRKGsOSL88OklgbyIaESloS6HXd5Ojq-vc6S_0XnbbNGOdESrIAAAAASUVORK5C
YII=
:: gfx/enemy-02.png
b64$iVBORw0KGgoAAAANSUhEUgAAABIAAAARCAYAAADQWvz5AAAAAXNSR0IArs4c6QAAAYBJREFU
OI2VkzFrwkAUx-8n4ldw0i10yHewc6k6mESETFlKP0Ag4FBxKQTEuXTpFBATstTSuXbo4locstml
n6FDr8P5LneXKPQPR5J3--fLe7kXhjPi0YqrzyyesFPe5rnkrFhW9k7Bmqaxu0kBAMuLL7jTUDNn
94uTVTbq6BrE6sm4Ow2RFUt0N6lcBJYgqib4UYhWDyi24n4-lmHyJA_hhFUqmhcKqQaiet6eP2Ws
Uakm8suM-bgCAYQn_AEeX151kPamOCnbMkWxOJFVHfoeWDxhGmhmtYDIh5u3kQVDYPitrSwYws3b
QOQLr6LKHCFOBMxrCJgidxoC1q-wGCDwaMU7tsO37x_8Yzv8znI4x0Bcd2vOo5VYu7W217Edrs6U
rIhO4KkFwGphPvLEhld2Px95mOWp8BiSIDqBQ99Dd5MCeQrk5VHTNyEIfWTKZ9SeDMQTVjucR8jN
9RUuBzb824UGa1KymqDCTKmzo_XURo8yf1AAILjZ2r9Fp2jG-wAo-dIT4VkPIwAAAABJRU5ErkJg
gg==
:: gfx/enemy-03.png
b64$iVBORw0KGgoAAAANSUhEUgAAABIAAAARCAYAAADQWvz5AAAAAXNSR0IArs4c6QAAAYRJREFU
OI2Vky9vwkAYxn9ttn6FKXANAj-JJxiI0jIWVN0_AAkJhlSSLOgFg1jI-pTMDDIzA4iZ2QVRBwaL
RXATt956bUe2Sy7pvc_TX56_753BkSU6DyJ5NvpN4zfvyTHAJBrk1o8BNXOhXBehcy7Ex5O2Q_dc
FMp1kU4KYKYhxWnIoLTB7bZl0a4o3e22GZQ2FKdh5rfNNMTfJ1S7AtFCfq8aquzvycC0RABBlCDl
QDKeJEhL02n9qKtGBgLSk0kVN3exfBeCqhBUZaN3WyHu0PduK7Vv32L5rpqvxj9-_eTNtggcD7c-
ZkINd7TVgkz8Gu7zGXRa9J5DTl8_laZAw9krPkB-DJ0Wrmcy8WsayO22wT5Ij20xnL0qzUj2CORE
gmhPz7YI7i8hPEinZ9K7elTayJLl9YWH0W8aamrrCw_AkYWEOJ4C4Elb4HgZiJYoXulkMTjvHCfJ
BcUwkKMFGN-KG966vtFSpN9b5tHGhjjdPDGZdIo-r-iO-fZQ-w37C_QLffv1evDJCm8AAAAASUVO
RK5CYII=
:: gfx/ship.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTEzIDIxOjI1OjE4Iixtb2RpZmllZD0iMjAyNC0x
MC0xMyAyMToyNToxOCIscmV2aXNpb249MF1dbHo0AAcEAACpNgAA8yF7WzBdPXtibXA9cHh1AEMg
EBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIANp5PTAsem9vbT0xMn0sPwBP8gHtAgIA
CA9PAB1--QHWHQa9BQQAGz-F-QFoAB0pAg0CAF79AQL9DwMAD1YAHTEKEBoCAAQIACsaAAgAHxAi
AFMPuAAdL-DwMgCB8A1gEcABBwYBsCENAZABLBGAAQwXHBFwAQwHDAEMCABAIQwhYAYA8BkBBwFQ
ERwBBxEGAVABDQEMBxENBg0BMAEtIQ0GDQcNASABHQYtBg0WCgD-Dw0GBxYHBg0GHQEwAQcGDQEG
Bw0hUAEFERUNEXBhMKIAIS8GB6IABCBgEaIAIlARogCQQAEGARwRBwEGCgBgDQEMFxEGkAD0BD0x
HQYHARABHRY9Bg0WARABDRahAP8CIBEHHREHMUABBhUBFQ0RYHGfACKAFgGgUZABPAGcACAsAZwA
8AEcAQwBUCEMMQwhMAEHAQwxngBgMAEGEQcRQgEAIwExDREXQwEQACMB9gQGDTENBg0GBxEmDQY9
Bg0mER0GRQH-AwAxBwEWAQcxMAEGAQURBQEGAacAJPEEBwYBoAENIaARLAGAEQwXHAFwEUYBgAFg
IQwhDBFQqgABCADwAgYBBxEcAQYBMAENBhEXDAENswDgBwYdMT0BEAEWDQY9Fh1PAQKkAADzAc8x
BxEdBxFAEQ0VARWfACYvBgefAAkiAWCfACABYEcBQQEcEUBFATAHDAGHAnANBw0GDSEtWgFAFg0G
LdoBFQFEAWABMCENBwaXAr8BUBENFREFAXBhQI0DgQ8yABz-BQQGBAAfGAAOFx4XHh8XHh0OAB4A
QQAafwgIBCAH8Cw0AB_PUAcMB1AH8Bw6ACC-J0AHDAdAF9AH8AU_ACYDQgA-YAdAQwAiBUUAf1AH
YAdQB0DZAX7yEAgQBCAZUBlACRcJMAkXCSAJNwkQCTcJAAkHChcKBxkGADEaFxoEAP8GCgkaCQo5
GlkaOQA5ABkQGRAJIBkgbwAhAHEANRoJMHUAWAoXCgkQBgAxGRoZBAARWQIAbwkAGQAJMGsAJQxv
ADIwCRoEABI5AgBfQBlQGSBnAR7-BzcXsFeAd3B3YJdQl1CXYHeAV6A38BZHAB3xBGAX0BfQF6AH
EBcQB2AXADcAF1AGAP8AYHdQBwB3AAcwt0CXYHdwXgAkYPAEB1AHcD8D-xMLF9AXcAdAF0AHIAcg
NyAHYFeQV2AHEFcQB2BXoDfAF-AXXAAdEDBXAGE0B9AH8CFYAF9wF8A3sEoAIi-w8DIA--------
--------------------------------------------------VQPTEyfX0=
:: gfx/stage.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTEzIDIxOjI2OjIzIixtb2RpZmllZD0iMjAyNC0x
MC0xMyAyMToyNjoyMyIscmV2aXNpb249MF1dbHo0AP8BAABtNAAA8yF7WzBdPXtibXA9cHh1AEMg
EBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIAMp5PTAsem9vbT04fSw_AE-yAe0CAgAI
D04AHH-9AdYdBr0FBAAbP8X9AWcAHCkCDQIAXv0BAv0PAwAPVQAcMQoQGgIABAgAKxoACAAfECIA
Uw_3ABwv8PAxAP-------6TH8gBdPxW9Pp0ePR59BABinV6dXt0eAgBvnT69Pv0GWAAzDwQABQ9k
ACIv8PDiAf8Uum0fFd0evT69Pt0eAgBvvV6dXv0F2gErAUgABwQAb91_fX79BFQAM2-9AB7dHn0j
Aimf8gA9HxUdHp0eBAAAMX59frEAAwIAD1wAIVN-FX1_fUAAEN1NARMADQAQfQ0AHwYGASUGUQAE
EgEPBQEtAKkAA1YAIx69BAAEAgAv-QiuASsInAAPsAAyyvBGDQ8VHbAeHbANDgQATy4N8DZNAB-h
HxUNsA4dDrAtDrAdDg1JAE8OLbA_SwAwIS0ODgAvDR6YACF1DxUNDg2wDgUAET5TAAMEAA9QACAg
PxXXAEEOLbAumQAvLQ4vASkESQAvDh3jAClJPxWwLXgBAwQAD5cAJgaOAA_aACsf8DEA--------
----------------------------------------vFBtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDEwOjQ5OjA5Iixtb2RpZmllZD0iMjAyNC0x
MS0yMCAyMjoxNDo0MiJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDA5OjIxOjQxIixtb2RpZmllZD0iMjAyNC0x
MS0yMCAyMjoxNDo0MSIscmV2aXNpb249MTI3OV1dbHo0AIoMAABqQAAA-xZ7e2JtcD11c2VyZGF0
YSgiaTE2IiwxNiwyNTYsIjAwOWYwMDAzBAAjIzlmQAAfMQQAIQ9AAPtXMzIwMDMcAA_AAFofMwQA
IwVAAB8xBAAhDwAC-wESMAwAD4AAXh8zBAAjBUAAHzEEACEPAAL-ACIyOQwAD4AAXh8zBAAjBUAA
HzEEACEPAAL8UjEwMDI4DAAPgABZ42QwMDBkODAwZDQwMGQzCAAMEAAIGAAIMAAACAASZAwAEGUY
ABNiEAAXMBAAF2MYAARMABcwVAATOSQAW2EwMGMxEAATMAQACBgAGmIIAC9jOAQALFI5MDBjYZQA
I2NiEAAeORgADygABSdkNQwBFzQQAA4YAA8QAAMIFAAPCAAhCAwADwgAICNlMQQAFzMMAAQEAB4y
DAAPBAAaD1QAAQtMAG9hZDAwYWUIABAPFAABF2QkAgBUAhMx3AAWMhQADwQAFSdkMcgCCHwCD0AA
FQSgAg88ABwvZWEEACsESAAQYgQAD-gAIABEABBmiAGHNjAwYTcwMGYUAA8MABFnYzQwMGZiQAAA
HAMSYwgAAQwAFzUMAAMsAAgkAC9jNUAAABJkCAANTAAeZFgAAYgAFzlAABY4FAAPDAARBMgABUAA
DugADwABCwOUAAVAAAzoAB81zAALL2NjQAAAHjUoAA1YAB80AAEzBDwCImFmBAAuYjFIAhBlGAMX
NQQAHjYcAA8EAArAYzAwYjMwMGI0MDBiEAAWZUgAABwAEGXQAxI1BAArZWQEABNmQABAYjAwYggA
E2RAABNmCAADQAAFLAADCAArYjZAABM2DAAfZkAAAwQgAAWoAAOsACtiNiQAE2Q4ABpkQAAiYTU8
ACplYgQAI2I1JAATZjQABHgAH2ZAAAAHOAAFQAAfZEAABBpkQAAEoAAFKAEELAEbZkAAH2RAAAAI
HAAXZuwABBgAGmMcAA1AAAPAACZhNQwAD0AAAS9hNUAAEydlZgwAB0AAL2VkQAAHDgQAD4AAGwUs
AAwMAA9AABQmYTUgAAgMAAhAAAVcAA9AABwQZuwDFzUEAB42QAAPvAAGH2QgAAEPgAAYAIwBEzQY
AAgIABdmQAAaZjQACAwAARAAH2MIAAMIgAAFBAAIoAAPEAANHmUcAQ8EABpANjAwZoAAEjcEACJm
ZAgAJmEzDAAEGAAnZmYEAAMcACZmZagDJ2EzDAAXYgwAUmEwMGE5IAAJJAASOBgADjQADwQAAxRh
BAADRAAEWAAvZWIEABsXYQwADwQAcgTICAB0Bhoz9AsvYzAEAAADKAAFOAADyAsEUAAvYzgEAAsN
KAAfOQQABwUsAB85BAAIBJgAD6wACAUQAB8w4AAEHzFAABgfMTQADB4xQAAPMAAJL2VhBAAHBEAA
L2VhBAAIH2IEACsiZjMEAAgQAAwcAypmM-ACBAwALmYzMAAEFAAmZWIEAAQgAC5mM0AAKmFhHAAI
FAAvZWJAAAMIKAAvZjMYAAMvYTkUAAcEDAAuZjMcAAQUAC9lYsAACAcQAAwcAAxsAA9AAAEmZWI8
ACpmMxgADywABQgQAARgACZmM0gAImE5HAAMLAAMMAAMZAAPQAABJmFhEAAEFAAmZjMQACZlYjgA
L2ViBAAsH2EAAxciZjIkDiZmYRQAD3AOBSZhMkAAJ2EyJA4aZDQAK2QzRAAfMUAABy5jMWgOL2Ri
eA4AHzFAAAAPAAQEBMwMDAQAJmYxQAAPJAAJI2ZiTAATNAgAFjDUDAVAAAQkABdkCAADJAAE8AwE
OAABCAAfNUAAAAtgACJjMBgABMwMDZwAFzlAAA8kAAgPAAEyCJwAFjScAAVAABNiHAAIBAESNBgA
BRwAFzUgAA8AAQEIJAEDDAAPAAExL2MwBAAIA0AALmMwBAAPAA4KHjZAAA8oAAUEQAoJ3AkeZUAA
DygABS5lY3QKD0AABggoABpmQAAJBAAPQAAIDCgAK2VjlAAfZkAACAgkAAxAAAsYAA9AAAIfZEAA
DB9kQAAUH2RAAAAEVAAPQAANF2YIAARAAAQUAAcYAA9AAAIIKAAXZEAAD8ABLQhYAB9mQAALDCgA
K2VjFAAfZEAADAQkAA_ADAkPAAMAL2Y0gAwHImZmUAwjZTdgDA6AAA8oAAsAxBFIODAwYgQGC0AA
DygAAw8ABRMFYBQeMSASAZwEHjAEACtmYkAAAHgAEzkEAAiAAA-ABBAvYzAEAAcvYjEEAAQWMkAA
CbwADAQAHzkEAAQXYUAACLwADAQAGzAUARMxCAAWMEAABRAAHjAkAC5iOBQBKmIwwAANWAAPUAAI
BVQAH2GAAAgHBAAOFBgPCAAcCAwADwgAIQgMAA8IACEIDAAPCAAhDxQAAR8zCAAEHzgIAAALFAAN
_BoMABsLMAANPAAfYVQCAwk8Chc4CAAPPAAAJmFmBAArYjIcGRs4CAAIDAASMjwCCUAAA5gCD4AA
DQxEAAzUAi9kMQABFw2wCg8AARAIgAAiYzBEABdhDAAPAAESB0QAEGE4AB8xvAAMHzgUAAQLRAAP
vAAGGzQMAB84JBwEHzUgAAQbOAwADwgAICtjMGwBCAQAD0AEEC9lYSANBwRAAC9lYQQAByZjMAQA
I2Q5MAMfYYAAByZkMWABBBQAD8QAAh4xQAAOZAAPBAAMDEAADGQAHjCQHA8IAB0vYzAEAE8PNAEG
C9gADygABQ80ARUOKAAONAENEAAOBAAPLAAbAGwJEzcIAB82EAAEDBQACAwAAEQJE2YIAB9lEAAE
H2UgAAcvZTkEACsAcAEvZTgIACgDDAAPAAQqDmwBD4wBGwhIABswzA4fMAQAAQ9sACMOyAIPBAAY
H2PIAhAEuAAPjAAJA3wQL2MwpAAoHzEYAAcJpAAbYzAADKAAG2QgAA8EACAJpAgEeAAPVAAABZgA
CzAAL2M4BAAsBFgjGjRYIwkEAAwgAAcQACtkNaQJGjWEBgSUBgX4Ahs1EAAIDAALiAgvYzS8Bwwf
OBQAABszAAIPAAgZGzOAAAxUAh84CAAAD7wABQN8ACtjMIAAGjMwAA94AAkIBAAnZDn4AQhMAA54
AA8EAA4JkAAESAALNAEvYzBQAwQbY5AAD7wACC9kMRwADw0gAAdkAwVkAA88AAUeM7wADwQACg_Q
AQEIjAEfMjQABw_AAAYeOEQADzQAChc1PAATNAQAHzgIACgbOFAADAgAHzgIAAwONAAOCAAfOAgA
CBc4xAEfYqQCBAgIABs4CAAIAAIHOAEvZDlMAAgIRAAfM7wBCBIwVAAvZDlEAAgIgAAXMAQAHzHw
AQQIPAAXOBQAHzWIAAcPgAACBAgACzQABWwAHjKIACdjNBQABIgDGmM8ASdkORQAHzAEAAcFaAAI
bAAIYAAHjAMJlAAMaAAbOEQADwQAAA2UABtkgAAPRAABD7wIARtjkAAXODwAC0QAKmQxtAANgAME
MAAIDAAeOCQADxAAAggIAAgMAA8IACAnYzAEAAR4AQ8QAAUPGAABHzgEACwfOQQAKy9lYQQACxtm
lA4MBAAF7AEP7AABHzU8AgAeMBADDwQAGg5sAA4EAAdgAwgEAAlUAgekAA4sAA_oAAMPzAABJmQw
DAQPiAQCCHgAHzgIAAAEJAUEWAAbZMgAD4AEARMwPAAEKAAPBAAJHzVEAAQDCAAvYzCMAQADeAAM
BAArZDmwABNiHAAMQAEITAAA5BAWNLAaAQwBGzCEAQ8EAAwFPBgXZYQAA2gBL2VhBAAPATwYFjdY
GAicEg8EAAYHIAAjZmM0GAcwGA8EAD4fMUABBwlEAhs1CAAfNEwBEwkAAhc4CAAfOFgABBoynAAF
gAAbOAgADhQADggDD4AAEQ88AAgvY2REAAgPPAAFA-gCCAQAD8QAAgcMAw9MAQkFPAALMAAvZTEE
ADAfMjQAOA9MABYPkDAlDwQAlB8yHAAJD9QANw8UAgIaMCQFBQgAH2QwAAAMJAAXY8QCCBQEBAAD
CzAABBwADzAAAQ4UAA8QAAAfNugTCA8UABEP8BMJH2YMAAQHBAAjZDYEABc3DAAMBAAfNyQABy9l
YgQAAyZkZgwADhwADzAABQ8EAB8NUAQPCAAdDxQAAR8wGAAYHjQkAA8sAAYPKAABDxQAAR80GAAU
HzQkABQPIAAJDzwAEQ9EAAkEFAAPCAAFHzQIAAQEIAAIDAAfNDQAFAUYAPEVIiksaGlkZGVuPWZh
bHNlLG5hbWU9Im1hcCIscGFuX3g9LTE4CgDyAnk9LTE0NTMsdGlsZV9oPTE2CgAQdwoAgHpvb209
MX19
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDEwOjQ5OjA5Iixtb2RpZmllZD0iMjAyNC0x
MS0yMCAyMjoxNDo0MiJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDA5OjIxOjQxIixtb2RpZmllZD0iMjAyNC0x
MS0yMCAyMjoxNDo0MSIscmV2aXNpb249MTE5Nl1dbHo0AKUAAAAUCgAA-zBweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDQA8PkAQFBgdADJAICQoLQAyQDwwPDQ8ODEAM8P8BAOv-J6oB
EAYPIBABIAEgAfAAAhACDhABIA8hIAEwD0Dwww8oD--wxg-4Cg--D4AP9w8NAfAJARAGDjAA----
--_9H-8BAKzPyA9AAA8QQP--sPD-AQD-2B-L9gEHUP----_E
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDEwOjQ5OjA5Iixtb2RpZmllZD0iMjAyNC0x
MS0yMCAyMjoxNDo0MiJdXQ==
:: blob.lua
--[[pod_format="raw",created="2024-10-06 05:10:33",modified="2024-10-21 21:54:39",revision=1006]]
include("dither.lua")

function blob(p)
	local flr_r = flr(p.r)
	local _r = {
		0,
		flr_r * 0.05,
		flr_r * 0.15,
		flr_r * 0.30,
	}

	--	local pat = { -- we can also use dither_mask(value) values instead
	--		0b0000000000000000,
	--		0b0001101001011010,
	--		0b0111111111111111,
	--		0b1111111111111111
	--	}

	local pat = {
		dither_mask(1),
		dither_mask(9 / 16),
		dither_mask(1 / 16),
		dither_mask(0),
	}

	if flr_r <= 5 then
		deli(_r, 4)
		deli(_r, 2)
		deli(pat, 2)
		deli(pat, 2)
	--	elseif flr_r <= 6 then
	--		deli(_r,3)
	--		deli(pat,3)
	elseif flr_r <= 8 then
		deli(_r, 4)
		deli(pat, 3)
		pat[2] = 0b1001001001001001
	elseif flr_r >= 12 then
		--		deli(_r,4)
		--		deli(pat,3)
		--		pat[2]=0b1001001001001001
		_r[2] = flr_r * 0.02
		_r[3] = flr_r * 0.08
		_r[4] = flr_r * 0.12
	end
	--	fillp(dither_mask(3/8))
	--	fillp(0b0001101001011010)
	--	circfill(p.x-2,p.y+2, flr_r, 0x1814) -- adds dark outline
	--	circfill(p.x-1,p.y+1, flr_r, 21) -- adds dark outline
	for i = 1, #_r do
		--		poke(0x550b,0x3f) -- set black to transparent
		--		palt()            -- recommended but what is this doing?
		--		fillp(dither_mask(i/#_r))
		fillp(pat[i])
		circfill(p.x, p.y - _r[i], flr_r - _r[i], p.c)
		--		poke(0x550b,0x00) -- set back to black
	end

	fillp()
	if flr_r == 1 then
		pset(p.x, p.y, p.c)
	elseif flr_r == 2 then
		rectfill(p.x - 1, p.y - 1, p.x + 1, p.y + 1, p.c)
	end
end

:: dither.lua
--[[pod_format="raw",created="2024-10-06 20:57:04",modified="2024-10-21 21:56:58",revision=680]]
local threshold_map = {
	0,
	8,
	2,
	10,
	12,
	4,
	14,
	6,
	3,
	11,
	1,
	9,
	15,
	7,
	13,
	5,
}

local function make_mask(value)
	local mask = 0
	for i = 1, 16 do
		mask = mask * 2
		if threshold_map[i] >= value then
			mask = mask + 1
		end
	end
	return mask
end

local dither_masks = {}

for i = 0, 16 do
	dither_masks[i] = make_mask(i)
end

-- value 0-1
function dither_mask(value)
	return dither_masks[mid(0, flr(value * 16 + 0.5), 16)]
end

:: draw.lua
--[[pod_format="raw",created="2024-10-21 21:26:28",modified="2024-11-20 22:14:41",revision=415]]

function drw_game()
	cls(0)
	camera(-xscroll, 0)
	for seg in all(cursegs) do
		map(seg.x, seg.y, x_borders, scroll - seg.o, 21, 8)
	end

	for p in all(parts) do
		if p.age >= 0 then
			-- animate color
			if p.ctab then
				p.ctabv = p.ctabv or 0
				local life = (p.age + p.ctabv) / p.maxage
				local i = mid(1, flr(1 + life * #p.ctab), #p.ctab)
				p.c = p.ctab[i]
			end
			p.draw(p)
		end
	end

	for e in all(enemies) do
		if e.flash > 0 then
			e.flash = e.flash - 1
			flash_arr = { 8, 8, 8, 8, 8, 14, 7, 14, 15, 7, 7, 8, 8, 14, 7 }
			for i = 1, #flash_arr do
				pal(i, flash_arr[i])
			end
		end
		mspr(e.sani[flr(e.si)], e.x, e.y)
		-- rect(e.x - 7, e.y - 7, e.x + 8, e.y + 8, e.iscol and 8 or 7)
		pal()
	end

	for s in all(shots) do
		mspr(s.sani[flr(s.si)], s.x, s.y)
	end

	for s in all(splash) do
		mspr(s.sani[flr(s.si)], s.x, s.y)
	end

	camera(0, 0)
	for m in all(muzz) do
		mspr(m.sani[flr(m.si)], px + m.x, py + m.y)
	end

	--	spr(shiparr[flr(shipspr * 2.4 + 3.5)], px, py)
	mspr(shiparr[flr(shipspr * 2.4 + 3.5)], px, py)

	-- rect(px - 7, py - 7, px + 8, py + 8, pcol and 8 or 7)

	local fframe = flr((t % (#flamearr - 1)) + 1)

	mspr(flamearr[fframe], px - 2 + banked, py + 6)
	mspr(flamearr[fframe], px + 3 - banked, py + 6, true)

	camera(-xscroll, 0)
	-- enemy bullets last to favor visibility
	for b in all(buls) do
		mspr(b.sani[flr(b.si)], b.x, b.y)
	end

	-- draw borders
	camera(0, 0)
	rectfill(0, 0, x_borders, 270, 32)
	rectfill(480, 0, 480 - x_borders, 270, 32)
	debug[1] = "scroll: " .. scroll
	debug[2] = "fframe: " .. (t % (#flamearr - 1)) + 1
	debug[3] = "enemies: " .. #enemies
end

function mspr(si, sx, sy, flip_x, flip_y)
	local ms = myspr[si]
	-- 1:i, 2:w, 3:h, 4:ox, 5:oy, 6:flip_x 7:flip_y
	sspr(ms[1], 0, 0, ms[2], ms[3], sx - ms[4], sy - ms[5], ms[2], ms[3], ms.flip_x or flip_x, ms.flip_y or flip_y)
	if ms.nextspr then
		mspr(ms.nextspr, sx, sy)
	end
end

function drw_menu()
	for seg in all(menucursegs) do
		map(seg.x, seg.y, x_borders - 20 + (sin(t % 300 / 300) * 20), scroll - seg.o, 21, 8)
		--map(seg.x, seg.y, x_borders - 20, scroll - seg.o, 21, 8)
	end
	rectfill(0, 0, x_borders, 270, 32)
	rectfill(480, 0, 480 - x_borders, 270, 32)
end

:: explmain.lua
--[[pod_format="raw",created="2024-10-06 04:41:06",modified="2024-11-20 22:14:41",revision=1267]]
-- [x] flash / contrast flame
-- [ ] fireball
-- [ ] smoke

-- colors for fireball progression
-- white/white 		0x0707		119
-- white/yellow 		0x070a		167
-- yellow/orange 	0x0a09		154
-- orange/yellow 	0x090a		169
-- pgrey/red 		0x0d08		141
-- pgrey/dark grey 0x0d05		93

-- [ ] billowing (fire and smoke)
-- [ ] going up
-- [ ] smoke dissipates
-- [ ] sparks

include("blob.lua")
include("explode.lua")
include("spark.lua")

function _init()
	parts = {}
	slowmo = false

	t = 0
end

function _draw()
	cls(12)
	for p in all(parts) do
		if p.wait == nil then
			p.draw(p)
		end
	end
	--	print(myblb.r, 236, 250, 7)
	--	print(dither_mask(1.1/16), 2, 2, 7)
	print(t, 2, 2, 7)
end

function _update()
	if btnp(4) then
		slowmo = false
		explode(240 + rnd(20) - 10, 135 + rnd(20) - 10)
	end
	if btnp(5) then
		slowmo = true
		explode(240, 135)
		t = 0
	end

	if slowmo == false or btnp(1) then
		t += 1
		for p in all(parts) do
			dopart(p)
		end
	end
end

function rndrange(low, high)
	return flr(rnd(high + 1 - low) + low)
end


:: explode.lua
--[[pod_format="raw",created="2024-10-07 01:29:38",modified="2024-10-21 21:56:01",revision=635]]
function explode(ex, ey)
	add(parts, {
		draw = blob,
		x = ex,
		y = ey,
		r = 17,
		maxage = 2,
		c = 0x0707,
		ctab = { 0x0707, 0x070a },
	})

	sparkblast(ex, ey, 2)
	sparkblast(ex, ey, 15)

	grape(ex, ey, 2, 13, 1, "return", { 0x070a, 0x070a, 0x070a, 0x0a09 }, 0)
	grape(rndrange(ex - 2, ex + 2), ey - 5, 10, 20, 1, "return", { 0x070a, 0x0a09, 0x090a }, -0.2)
	grape(
		rndrange(ex - 3, ex + 3),
		ey - 10,
		25,
		25,
		0.2,
		"fade",
		{ 0x070a, 0x070a, 0x0a09, 0x090a, 0x0d08, 0x0d05 },
		-0.3
	)
end

function dopart(p)
	-- [ ] age function
	-- [ ] max age counter

	if p.wait then
		-- wait countdown
		p.wait = p.wait - 1
		if p.wait <= 0 then
			p.wait = nil
			if p.c == nil and p.ctab then
				p.c = p.ctab[1]
			end
		end
	else
		-- particle logic
		p.age = p.age or 0
		if p.age == 0 then
			p.ox = p.x
			p.oy = p.y
			p.r = p.r or 1
			p.ctabv = p.ctabv or 0
		end

		p.age = p.age + 1
		-- animate color
		if p.ctab then
			local life = (p.age + p.ctabv) / p.maxage
			local i = mid(1, flr(1 + life * #p.ctab), #p.ctab)
			p.c = p.ctab[i]
		end

		-- movement
		if p.to_x then
			p.x = p.x + ((p.to_x - p.x) / (4 / p.spd))
			p.y = p.y + ((p.to_y - p.y) / (4 / p.spd))
		end

		if p.sx then
			p.x = p.x + p.sx
			p.y = p.y + p.sy
			if p.to_x then
				p.to_x = p.to_x + p.sx
				p.to_y = p.to_y + p.sy
			end
			if p.drag then
				p.sx = p.sx * p.drag
				p.sy = p.sy * p.drag
			end
		end

		-- size
		if p.to_r then
			p.r = p.r((p.to_r - p.r) / (5 / p.spd))
		end

		if p.sr then
			p.r = p.r + p.sr
		end

		if p.age >= p.maxage or p.r < 0.5 then
			if p.onend == "return" then
				p.maxage = p.maxage + 32000
				p.to_x = p.ox
				p.to_y = p.oy
				p.to_r = nil
				p.sr = -0.3
			elseif p.onend == "fade" then
				p.maxage = p.maxage + 32000
				p.to_r = nil
				p.sr = -0.1 - rnd(0.3)
			else
				del(parts, p)
			end
			p.ctab = nil
			p.onend = nil
		end
	end
	-- 2 main ways to logic and animate
	-- sx/sy velocity system.  not great control if you want control over the particles final destination
	-- to_x/to_y destination definition
end

function grape(ex, ey, ewait, emaxage, espd, eonend, ectab, edrift)
	local spokes = 6
	local ang = rnd()
	local step = 1 / spokes
	local shakiness = rnd(3) - 1.5

	-- spawn spokes
	for i = 1, spokes do
		local myang = ang + step * i
		local dist = 8 + shakiness
		local dist2 = dist / 2
		local temp_ox = shakiness + ex + sin(myang) * dist2
		local temp_oy = shakiness + ey + cos(myang) * dist2

		add(parts, {
			draw = blob,
			x = temp_ox,
			y = temp_oy,
			ox = temp_ox,
			oy = temp_oy,
			r = 3,
			to_r = rndrange(3, 7),
			to_x = shakiness + ex + sin(myang) * dist,
			to_y = shakiness + ey + cos(myang) * dist,
			sx = 0,
			sy = edrift,
			spd = espd or 1,
			wait = ewait,
			maxage = emaxage,
			onend = eonend,
			c = ectab[1],
			ctab = ectab,
			ctabv = rnd(4),
		})
	end
	-- spawn center
	add(parts, {
		draw = blob,
		x = shakiness + ex,
		y = shakiness + ey - 2,
		r = 3,
		to_r = rndrange(6, 9),
		sx = 0,
		sy = edrift,
		spd = espd or 1,
		wait = ewait,
		maxage = emaxage,
		onend = eonend,
		c = ectab[1],
		ctab = ectab,
	})
end

:: gameplay.lua
--[[pod_format="raw",created="2024-10-21 21:26:48",modified="2024-11-20 22:14:41",revision=381]]
function spawnenemy()
	-- add(enemies, {
	-- 	-- play range for these enemies is 143-379 with current coordinate system
	-- 	x = map_range(rnd(), 0, 1, 143, 379),
	-- 	-- x = 379,
	-- 	-- x = 143,
	-- 	y = -16,
	-- 	sani = { 18, 19, 20 },
	-- 	si = 1,
	-- 	sx = 0,
	-- 	sy = 0,
	-- 	brain = 1,
	-- 	age = 0,
	-- })
	add(enemies, {
		x = 240,
		y = 120,
		sani = { 18, 19, 20 },
		si = 1,
		sx = 0,
		sy = 0,
		brain = 2,
		age = 0,
		flash = 0,
		hp = 15,
	})
end

function doenemies()
	for e in all(enemies) do
		if e.brain == 1 then
			if e.age < 12 then
				-- fly down
				e.sy = 1.5
			elseif e.age < 120 then
				if e.age == 60 then
					add(buls, {
						x = e.x,
						y = e.y,
						sx = 0,
						sy = 2,
						sani = { 21, 22 },
						si = 1,
					})
				end
				-- stay
				e.sy = max(0, e.sy - 0.03)
			else
				-- fly up
				e.sy = e.sy - 0.04
				if e.y < -16 then
					del(enemies, e)
				end
			end
		end
		e.age = e.age + 1
		e.x = e.x + e.sx
		e.y = e.y + e.sy
		e.si = e.si + 0.15
		if flr(e.si) > #e.sani then
			e.si = 1
		end
	end
end

function doshots(arr)
	for s in all(arr) do
		s.x = s.x + s.sx
		s.y = s.y + s.sy
		s.si = s.si + 0.5

		if flr(s.si) > #s.sani then
			s.si = 1
		end
		if s.y < -16 or s.y > 280 then
			del(arr, s)
		end
	end
end

function shoot()
	local shotspd = -12
	shotwait = 3
	add(shots, {
		x = px - 5 + banked - xscroll,
		y = py - 4,
		sx = 0,
		sy = shotspd,
		sani = { 6, 7, 8, 7 },
		si = t % 4 + 1,
	})
	add(shots, {
		x = px + 5 - banked - xscroll,
		y = py - 4,
		sx = 0,
		sy = shotspd,
		sani = { 6, 7, 8, 7 },
		si = t % 4 + 1,
	})
	add(muzz, {
		x = -4 + banked,
		y = -1,
		sani = { 9, 10, 11, 12 },
		si = 0,
	})
	add(muzz, {
		x = 6 - banked,
		y = -1,
		sani = { 9, 10, 11, 12 },
		si = 0,
	})
end

:: main.lua
--[[pod_format="raw",created="2024-09-22 09:21:41",modified="2024-11-20 22:14:41",revision=1645]]
---@diagnostic disable-next-line: undefined-global
include("tools.lua")
include("draw.lua")
include("update.lua")
include("gameplay.lua")
include("particles.lua")
include("profiler.lua")

function _init()
	profile("_init")
	t = 0
	debug = {}
	profile.enabled(true, true)

	-- in the tutorial he stores a bunch of values needed for sspr in pico-8
	-- we don't need that in picotron, but then he also bakes in offset values
	-- so this array is for holding those kinds of values
--	myspr = {
--		-- ship sprites 1-5
--		{ i = 8, w = 15, h = 18, ox = 5, oy = 8 },
--		{ i = 9, w = 16, h = 18, ox = 7, oy = 8 },
--		{ i = 10, w = 18, h = 18, ox = 8, oy = 8 },
--		{ i = 11, w = 16, h = 18, ox = 7, oy = 8 },
--		{ i = 12, w = 15, h = 18, ox = 8, oy = 8 },
--		-- shot sprites 6-8
--		{ i = 24, w = 8, h = 16, ox = 3, oy = 0 },
--		{ i = 25, w = 6, h = 16, ox = 2, oy = 0 },
--		{ i = 26, w = 4, h = 16, ox = 1, oy = 0 },
--		-- muzz sprites 9-12
--		{ i = 27, w = 10, h = 10, ox = 5, oy = 9 },
--		{ i = 28, w = 12, h = 14, ox = 6, oy = 13 },
--		{ i = 29, w = 14, h = 13, ox = 7, oy = 12 },
--		{ i = 30, w = 16, h = 14, ox = 8, oy = 13 },
--		-- flame sprites 13-17
--		{ i = 17, w = 1, h = 1, ox = 0, oy = 0 },
--		{ i = 18, w = 3, h = 3, ox = 1, oy = 0 },
--		{ i = 19, w = 3, h = 6, ox = 1, oy = 0 },
--		{ i = 20, w = 3, h = 8, ox = 1, oy = 0 },
--		{ i = 21, w = 3, h = 8, ox = 1, oy = 0 },
--		-- enemy sprites 18-20
--		{ i = 32, w = 16, h = 16, ox = 8, oy = 8 },
--		{ i = 33, w = 18, h = 17, ox = 9, oy = 8 },
--		{ i = 34, w = 18, h = 17, ox = 9, oy = 8 },
--		-- enemy shot 21-22
--		{ i = 1, w = 7, h = 7, ox = 3, oy = 3 },
--		{ i = 2, w = 7, h = 7, ox = 3, oy = 3 },
--		-- enemy shot 23-26
--		{ i = 3, w = 6, h = 7, ox = 3, oy = 0 },
--		{ i = 4, w = 10, h = 9, ox = 5, oy = 2 },
--		{ i = 5, w = 16, h = 12, ox = 8, oy = 5 },
--		{ i = 6, w = 12, h = 12, ox = 6, oy = 6 },
--	}
	myspr = {
		-- ship sprites 1-5
		{ 8, 15, 18, 5, 8 },
		{ 9, 16, 18, 7, 8 },
		{ 10, 18, 18, 8, 8 },
		{ 11, 16, 18, 7, 8 },
		{ 12, 15, 18, 8, 8 },
		-- shot sprites 6-8
		{ 24, 8, 16, 3, 0 },
		{ 25, 6, 16, 2, 0 },
		{ 26, 4, 16, 1, 0 },
		-- muzz sprites 9-12
		{ 27, 10, 10, 5, 9 },
		{ 28, 12, 14, 6, 13 },
		{ 29, 14, 13, 7, 12 },
		{ 30, 16, 14, 8, 13 },
		-- flame sprites 13-17
		{ 17, 1, 1, 0, 0 },
		{ 18, 3, 3, 1, 0 },
		{ 19, 3, 6, 1, 0 },
		{ 20, 3, 8, 1, 0 },
		{ 21, 3, 8, 1, 0 },
		-- enemy sprites 18-20
		{ 32, 16, 16, 8, 8 },
		{ 33, 18, 17, 9, 8 },
		{ 34, 18, 17, 9, 8 },
		-- enemy shot 21-22
		{ 1, 7, 7, 3, 3 },
		{ 2, 7, 7, 3, 3 },
		-- enemy shot 23-26
		{ 3, 6, 7, 3, 0 },
		{ 4, 10, 9, 5, 2 },
		{ 5, 16, 12, 8, 5 },
		{ 6, 12, 12, 6, 6 },
	}
--	myspr = fetch("myspr.pod")

	sprval = 3

	butdic = { -- 0 - stop
		1, -- 1  - left
		2, -- 2  - right
		0, -- 3  - stop l+r
		3, -- 4  - up
		5, -- 5  - diag u+l
		6, -- 6  - diag u+r
		3, -- 7  - up u+l+r
		4, -- 8  - down
		8, -- 9  - diag d+l
		7, -- 10 - diag d+r
		4, -- 11 - down r+l+d
		0, -- 12 - stop u+d
		1, -- 13 - left l+u+d
		2, -- 14 - right r+u+d
		0, -- 15 - stop l+r+u+d
	}
	butdic[0] = 0
	dirx = { -1, 1, 0, 0, -0.75, 0.75, 0.75, -0.75 }
	diry = { 0, 0, -1, 1, -0.75, -0.75, 0.75, 0.75 }

	x_borders = 132
	-- 216px horizontal space mirrors 5:4 tate at 270:216
	-- on a 480px wide display, this would require two padding sections at 132px each

	-- BUGFIX: dummy segment needed at start

	shiparr = { 1, 2, 3, 4, 5 }
	flamearr = { 13, 14, 13, 15, 14, 16, 15, 17 }
	-- lazydevs segs 3,3,3,3,3,2,1,0,1,7,6,5,10,4,11,6,11,11,5,9,10,8,1,0,15,14,1,13,12,19,19,18,17,16,18,17,16,17,16,19,22,21,20,27,26,25,23,24,3,3
	menusegs = { 5 }
	menusegs[0] = 4
	menucursegs = {}
	scroll = 0
	mapsegi = 0
	xscroll = 0

	mapsegs = {
		0,
		3,
		3,
		3,
		3,
		3,
		2,
		1,
		28,
		1,
		7,
		6,
		5,
		10,
		4,
		11,
		6,
		11,
		11,
		5,
		9,
		10,
		8,
		1,
		28,
		14,
		15,
		1,
		12,
		13,
		19,
		19,
		16,
		17,
		18,
		16,
		17,
		18,
		17,
		18,
		19,
		20,
		21,
		22,
		23,
		24,
		25,
		26,
		27,
		3,
		3,
		3,
	}

	_upd = upd_menu
	_drw = drw_menu
end

function _draw()
	_drw()
	-- debug
	cursor(4, 4)
	color(7)
	for txt in all(debug) do
		print(txt)
	end
end

function _update()
	t = t + 1
	_upd()
end

function startgame()
	px, py = 240, 230
	spd = 1.537
	lastdir = 0
	shipspr = 0

	scroll = 11 --700 -- default 11
	xscroll = 0
	mapsegi = 1
	seglib = {}
	cursegs = {}

	boss = false

	parts = {}
	shots = {}
	shotwait = 0
	muzz = {}
	banked = 0
	enemies = {}
	buls = {}
	splash = {}

	pcol = false

	spawnenemy()
	-- add(buls, {
	-- 	x = 200,
	-- 	y = 180,
	-- 	sx = 0,
	-- 	sy = 0,
	-- 	sani = { 21, 22 },
	-- 	si = 1,
	-- })

	_upd = upd_game
	_drw = drw_game
end

:: moveandshoot.lua
--[[pod_format="raw",created="2024-10-13 21:18:38",modified="2024-10-21 21:27:08",revision=487]]

:: myspr.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTA5IDAwOjI4OjA2Iixtb2RpZmllZD0iMjAyNC0x
MS0wOSAwMDoyODozOSIscmV2aXNpb249MV1dbHo0AEABAACmAgAA9Ax7e2g9MTgsaT04LG94PTUs
b3k9OCx3PTE1fSwaABA5GgAVNxoAFjYaACAxMBsAFTgbABc4GwAfMTYABxoyNgADawBgNixpPTI0
GwAQMxsAVzAsdz04GgAQNRoAFDIaABc2GgAQNhoAFDEaABI0GgAQMBoAFTfUABA5aQASMBsAEDQb
AAHvABA2GwAgMTMcABIyHAAQMxwABvEAIDEyHAAWNDgAFjPyACcxM9gAANcAAW4AFDCIABExGQAA
UAApMTihABEzGQAAugAvMTkZAAAAIgEvMjAZAAUfMRkAAAEGARszVQEDcAEQNxsAEDMbABw5pgEB
GwAfNBsAAQAaABUxiQEA5wAVNxgAHzIYAAQVMxgABp8BVTksaT00gwEXMoMBMDIsaRUAA7EAFzWx
AAAaABU2nAGANix3PTEyfX0=
:: particles.lua
--[[pod_format="raw",created="2024-10-21 21:26:56",modified="2024-11-20 22:14:41",revision=359]]
function blob(p)
	local flr_r = flr(p.r)
	local _r = {
		0,
		flr_r * 0.05,
		flr_r * 0.15,
		flr_r * 0.30,
	}

	--	local pat = { -- we can also use dither_mask(value) values instead
	--		0b0000000000000000,
	--		0b0001101001011010,
	--		0b0111111111111111,
	--		0b1111111111111111
	--	}

	local pat = {
		dither_mask(1),
		dither_mask(9 / 16),
		dither_mask(1 / 16),
		dither_mask(0),
	}

	if flr_r <= 5 then
		deli(_r, 4)
		deli(_r, 2)
		deli(pat, 2)
		deli(pat, 2)
	--	elseif flr_r <= 6 then
	--		deli(_r,3)
	--		deli(pat,3)
	elseif flr_r <= 8 then
		deli(_r, 4)
		deli(pat, 3)
		pat[2] = 0b1001001001001001
	elseif flr_r >= 12 then
		--		deli(_r,4)
		--		deli(pat,3)
		--		pat[2]=0b1001001001001001
		_r[2] = flr_r * 0.02
		_r[3] = flr_r * 0.08
		_r[4] = flr_r * 0.12
	end
	--	fillp(dither_mask(3/8))
	--	fillp(0b0001101001011010)
	--	circfill(p.x-2,p.y+2, flr_r, 0x1814) -- adds dark outline
	--	circfill(p.x-1,p.y+1, flr_r, 21) -- adds dark outline
	for i = 1, #_r do
		--		poke(0x550b,0x3f) -- set black to transparent
		--		palt()            -- recommended but what is this doing?
		--		fillp(dither_mask(i/#_r))
		fillp(pat[i])
		circfill(p.x, p.y - _r[i], flr_r - _r[i], p.c)
		--		poke(0x550b,0x00) -- set back to black
	end

	fillp()
	if flr_r == 1 then
		pset(p.x, p.y, p.c)
	elseif flr_r == 2 then
		rectfill(p.x - 1, p.y - 1, p.x + 1, p.y + 1, p.c)
	end
end

function explode(ex, ey)
	add(parts, {
		draw = blob,
		x = ex,
		y = ey,
		r = 17,
		maxage = 2,
		ctab = { 0x0707, 0x070a },
	})

	sparkblast(ex, ey, 2)
	sparkblast(ex, ey, 15)

	grape(ex, ey, 2, 13, 1, "return", { 0x070a, 0x070a, 0x070a, 0x0a09 }, 0)
	grape(ex + rnd(5) - 2.5, ey - 5, 10, 20, 1, "return", { 0x070a, 0x0a09, 0x090a }, -0.2)
	grape(ex + rnd(5) - 2.5, ey - 10, 25, 25, 0.2, "fade", { 0x070a, 0x070a, 0x0a09, 0x090a, 0x0d08, 0x0d05 }, -0.3)
end

function dopart(p)
	-- age and wait
	p.age = p.age or 0

	if p.age == 0 then
		p.ox = p.x
		p.oy = p.y
		p.r = p.r or 1
		p.ctabv = p.ctabv or 0
		p.spd = p.spd or 1
	end
	p.age = p.age + 1

	if p.age <= 0 then
		return
	end

	-- particle logic
	p.age = p.age + 1

	-- movement
	if p.to_x then
		p.x = p.x + ((p.to_x - p.x) / (4 / p.spd))
		p.y = p.y + ((p.to_y - p.y) / (4 / p.spd))
	end

	if p.sx then
		p.x = p.x + p.sx
		p.y = p.y + p.sy
		if p.to_x then
			p.to_x = p.to_x + p.sx
			p.to_y = p.to_y + p.sy
		end
		if p.drag then
			p.sx = p.sx * p.drag
			p.sy = p.sy * p.drag
		end
	end

	-- size
	if p.to_r then
		p.r = p.r + ((p.to_r - p.r) / (5 / p.spd))
	end

	if p.sr then
		p.r = p.r + p.sr
	end

	if p.age >= p.maxage or p.r < 0.5 then
		if p.onend == "return" then
			p.to_x = p.ox
			p.to_y = p.oy
			p.to_r = nil
			p.sr = -0.3
		elseif p.onend == "fade" then
			p.to_r = nil
			p.sr = -0.1 - rnd(0.3)
		else
			del(parts, p)
		end
		p.ctab = nil
		p.onend = nil
		p.maxage = 32000
	end
	-- 2 main ways to logic and animate
	-- sx/sy velocity system.  not great control if you want control over the particles final destination
	-- to_x/to_y destination definition
end

function grape(ex, ey, ewait, emaxage, espd, eonend, ectab, edrift)
	local spokes = 6
	local ang = rnd()
	local step = 1 / spokes
	local shakiness = rnd(3) - 1.5

	-- spawn spokes
	for i = 1, spokes do
		local myang = ang + step * i
		local dist = 8 + shakiness
		local dist2 = dist / 2
		local temp_ox = shakiness + ex + sin(myang) * dist2
		local temp_oy = shakiness + ey + cos(myang) * dist2

		add(parts, {
			draw = blob,
			x = temp_ox,
			y = temp_oy,
			ox = temp_ox,
			oy = temp_oy,
			r = 3,
			to_r = rndrange(3, 7),
			to_x = shakiness + ex + sin(myang) * dist,
			to_y = shakiness + ey + cos(myang) * dist,
			sx = 0,
			sy = edrift,
			spd = espd or 1,
			age = -ewait,
			maxage = emaxage,
			onend = eonend,
			ctab = ectab,
			ctabv = rnd(4),
		})
	end
	-- spawn center
	add(parts, {
		draw = blob,
		x = shakiness + ex,
		y = shakiness + ey - 2,
		r = 3,
		to_r = rndrange(6, 9),
		sx = 0,
		sy = edrift,
		spd = espd or 1,
		age = -ewait,
		maxage = emaxage,
		onend = eonend,
		ctab = ectab,
	})
end

function spark(p)
	-- pset(p.x, p.y, 8)
	line(p.x, p.y, p.x - p.sx * 2, p.y - p.sy * 2, 7)
	line(p.x + 1, p.y, p.x + p.sx * 2 + 1, p.y + p.sy * 2, p.c)
end

function sparkblast(ex, ey, ewait)
	local ang = rnd()
	for i = 1, 6 do
		local ang2 = ang + rnd(0.5)
		local spd = rndrange(4, 8)
		add(parts, {
			draw = spark,
			x = ex,
			y = ey,
			sx = sin(ang2) * spd,
			sy = cos(ang2) * spd,
			drag = 0.8,
			age = -ewait,
			maxage = rndrange(8, 20),
			ctab = { 7, 10 },
		})
	end
end

function domuzz()
	for m in all(muzz) do
		m.si = m.si + 1

		if flr(m.si) > #m.sani then
			del(muzz, m)
		end
	end
end

function dosplash()
	for s in all(splash) do
		s.si = s.si + 1

		if flr(s.si) > #s.sani then
			del(splash, s)
		end
	end
end

:: profiler.lua
--[[pod_format="raw",created="2024-09-20 18:19:15",modified="2024-11-20 22:14:41",revision=259]]
-- abledbody's profiler v1.1

local function do_nothing() end

-- The metatable here is to make profile() possible.
-- Why use a table at all? Because otherwise lua will try to cache the function call,
-- which by default is do_nothing.
local profile_meta = { __call = do_nothing }
profile = { draw = do_nothing }
setmetatable(profile, profile_meta)

local running = {} -- All incomplete profiles
-- All complete profiles. Note that if the profiles haven't been drawn yet, it will
-- not be cleared, and further profiles of the same name will add to the usage metric.
local profiles = {}
-- All completed lingering profiles. These are never automatically cleared.
local lingers = {}

-- start_profile, stop_profile, and stop_linger are all internal functions,
-- serving as paths for _profile to take. Lingers share start_profile.
local function start_profile(name, linger)
	local source = profiles[name]
	running[name] = {
		linger = linger,
	}
	local active = running[name]
	active.start = stat(1) --Delaying CPU usage grab until the last possible second.
end

local function stop_profile(name, active, delta)
	local profile = profiles[name]
	if profile then
		profile.time = delta + profile.time
	else
		profiles[name] = {
			time = delta,
			name = name,
		}
		add(profiles, profiles[name])
	end
end

local function stop_linger(name, active, delta)
	local profile = lingers[name]
	if profile then
		profile.time = profile.this_frame and delta + profile.time or delta
		profile.this_frame = true
	else
		lingers[name] = {
			time = delta,
			this_frame = true,
		}
	end
end

-- The main functionality lives here.
-- Takes in the name of what you're profiling, and whether or not to
-- make the profile linger.
local function _profile(_, name, linger)
	local t = stat(1)
	local active = running[name]
	if active then
		local delta = t - active.start

		if active.linger then
			stop_linger(name, active, delta)
		else
			stop_profile(name, active, delta)
		end

		running[name] = nil
	else
		start_profile(name, linger)
	end
end

-- Clears all lingering profiles.
function profile.clear_lingers()
	lingers = {}
end

local function draw_cpu()
	print("cpu:" .. string.sub(stat(1) * 100, 1, 5) .. "%", 1, 1, 7)
end

-- This draws the profiles, and then resets everything for the next frame.
-- If it is not called, usage metrics will accumulate.
-- Lingering profiles are always displayed after persistent profiles.
local function display_profiles()
	local i = 1
	for prof in all(profiles) do
		local usage = string.sub(prof.time * 100, 1, 5) .. "%"
		local to_print = prof.name .. ":" .. usage
		print(to_print, 1, 1 + i * 9, 7)
		i = i + 1
	end
	for name, prof in pairs(lingers) do
		local usage = string.sub(prof.time * 100, 1, 5) .. "%"
		local to_print = name .. (prof.this_frame and "[X]:" or "[ ]:") .. usage
		print(to_print, 1, 1 + i * 9, 7)
		prof.this_frame = false
		i = i + 1
	end
	profiles = {}
end

local function display_both()
	draw_cpu()
	display_profiles()
end

-- This swaps out function calls depending on whether or not you want to have
-- profiling. This is to make it as much as possible so that you don't have to
-- think about cleaning up profile calls for efficiency.
-- The first boolean is for detailed profiling, the second is for CPU usage.
function profile.enabled(detailed, cpu)
	profile_meta.__call = detailed and _profile or do_nothing
	profile.draw = detailed and (cpu and display_both or display_profiles) or (cpu and draw_cpu or do_nothing)
end


:: spark.lua
--[[pod_format="raw",created="2024-10-13 19:34:29",modified="2024-10-21 21:55:32",revision=192]]
function spark(p)
	-- pset(p.x, p.y, 8)
	line(p.x, p.y, p.x - p.sx * 2, p.y - p.sy * 2, 7)
	line(p.x + 1, p.y, p.x - p.sx * 2 + 1, p.y - p.sy * 2, p.c)
end

function sparkblast(ex, ey, ewait)
	local ang = rnd()
	for i = 1, 6 do
		local ang2 = ang + rnd(0.5)
		local spd = rndrange(4, 8)
		add(parts, {
			draw = spark,
			x = ex,
			y = ey,
			sx = sin(ang2) * spd,
			sy = cos(ang2) * spd,
			drag = 0.8,
			wait = ewait,
			maxage = rndrange(8, 20),
			c = 10,
			ctab = { 7, 10 },
		})
	end
end


:: tools.lua
--[[pod_format="raw",created="2024-10-21 21:26:41",modified="2024-11-20 22:14:41",revision=355]]
-- alternate to sgn, different in that 0 returns 0 instead of 1
function mysgn(v)
	return v == 0 and 0 or sgn(v)
end

-- for a value x between range in_min and in_max, map the value at the same
-- relational position between out_min and out_max
function map_range(x, in_min, in_max, out_min, out_max)
	return out_min + (x - in_min) * (out_max - out_min) / (in_max - in_min)
end

-- returns a random value inclusively between low and high
function rndrange(low, high)
	return flr(rnd(high + 1 - low) + low)
end

-- dither mask suite
local threshold_map = {
	0,
	8,
	2,
	10,
	12,
	4,
	14,
	6,
	3,
	11,
	1,
	9,
	15,
	7,
	13,
	5,
}

local function make_mask(value)
	local mask = 0
	for i = 1, 16 do
		mask = mask * 2
		if threshold_map[i] >= value then
			mask = mask + 1
		end
	end
	return mask
end

local dither_masks = {}

for i = 0, 16 do
	dither_masks[i] = make_mask(i)
end

-- value 0-1
function dither_mask(value)
	return dither_masks[mid(0, flr(value * 16 + 0.5), 16)]
end

function col(x1, y1, w1, h1, x2, y2, w2, h2)
	local a_left = x1
	local a_top = y1
	local a_right = x1 + w1 - 1
	local a_bottom = y1 + h1 - 1

	local b_left = x2
	local b_top = y2
	local b_right = x2 + w2 - 1
	local b_bottom = y2 + h2 - 1

	if a_top > b_bottom then
		return false
	end
	if b_top > a_bottom then
		return false
	end
	if a_left > b_right then
		return false
	end
	if b_left > a_right then
		return false
	end

	return true
end

:: update.lua
--[[pod_format="raw",created="2024-10-21 21:26:35",modified="2024-11-20 22:14:41",revision=396]]
function upd_game()
	-- SCROLLING
	scroll = scroll + 0.5

	if #cursegs < 1 or scroll - cursegs[#cursegs].o > 0 then
		if boss then
			scroll = scroll - 128
			for seg in all(cursegs) do
				seg.o = seg.o - 128
			end
		else
			mapsegi = mapsegi + 1
		end

		local segnum = mapsegs[mapsegi] or 0

		add(cursegs, {
			x = 0,
			y = 248 - ((segnum - 1) * 8),
			o = #cursegs < 1 and -128 or cursegs[#cursegs].o + 128,
		})

		if #cursegs > 2 and scroll - cursegs[1].o >= 384 then
			deli(cursegs, 1)
		end
	end

	-- INPUTS / MOVEMENT
	-- if btn(0) then
	-- 	sprval = (sprval <= 1) and 1 or (sprval - 1)
	-- end
	-- if btn(1) then
	-- 	sprval = (sprval >= 5) and 5 or (sprval + 1)
	-- end
	local dir = butdic[btn() & 0b1111]

	if lastdir ~= dir and dir >= 5 then
		px = flr(px) -- or flr(px) + 0.5
		py = flr(py) -- or flr(py) + 0.5
	end

	local dshipspr = 0
	banked = 0

	if dir > 0 then
		px = px + dirx[dir] * spd
		py = py + diry[dir] * spd

		dshipspr = mysgn(dirx[dir])
		banked = 1
	end

	shipspr = shipspr + mysgn(dshipspr - shipspr) * 0.18
	shipspr = mid(-1, shipspr, 1)

	lastdir = dir

	-- boundary checking
	if px < x_borders then
		px = x_borders
	end
	if px > 480 - x_borders - 15 then
		px = 480 - x_borders - 15 -- 15 is sprite size with an offset
	end

	percentage_scrolled = mid(6 / 32, (px - x_borders) / 201, 26 / 32)
	xscroll = flr(map_range(percentage_scrolled * -32, -26, -6, -40, 0))

	-- shooting
	if shotwait > 0 then
		shotwait = shotwait - 1
	else
		if btn(4) then
			shoot()
		end
	end

	-- dokaaaaaaaaaan!!!
	if btnp(5) then
		explode(40, 135)
	end

	boss = btn(5)

	doshots(shots)
	doshots(buls)
	dosplash()
	domuzz()
	doenemies()

	-- colission
	pcol = false
	for e in all(enemies) do
		e.iscol = false
	end
	-- shots vs enemies
	for e in all(enemies) do
		for s in all(shots) do
			if col(flr(s.x - 3 + xscroll), flr(s.y), 8, 16, flr(e.x - 7 + xscroll), flr(e.y - 7), 16, 16) then
				e.iscol = true
				e.flash = 2
				del(shots, s)
				add(splash, {
					x = s.x,
					y = s.y,
					sani = { 23, 24, 25, 26 },
					si = 1,
				})
				e.hp = e.hp - 1

				if e.hp <= 0 then
					explode(e.x, e.y)
					del(enemies, e)
				end
			end
		end
	end

	-- ship vs enemies
	for e in all(enemies) do
		if col(flr(px - 7), flr(py - 7), 16, 16, flr(e.x - 7 + xscroll), flr(e.y - 7), 16, 16) then
			pcol = true
		end
	end

	-- ship vs bullets
	for b in all(buls) do
		if col(flr(px - 7), flr(py - 7), 16, 16, flr(b.x - 3 + xscroll), flr(b.y - 3), 6, 6) then
			pcol = true
		end
	end

	for p in all(parts) do
		dopart(p)
	end
end

function upd_menu()
	-- SCROLLING
	scroll = scroll + 1

	if #menucursegs < 1 or scroll - menucursegs[#menucursegs].o > 0 then
		mapsegi = mapsegi + 1

		local segnum = menusegs[mapsegi % 2]

		add(menucursegs, {
			x = 0,
			y = 248 - ((segnum - 1) * 8),
			o = #menucursegs < 1 and -128 or menucursegs[#menucursegs].o + 128,
		})

		if scroll - menucursegs[1].o >= 384 then
			deli(menucursegs, 1)
		end
	end

	-- INPUTS
	if btnp(5) then
		startgame()
	end
end

:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTIyIDA5OjIyOjM5Iixtb2RpZmllZD0iMjAyNC0x
MS0yMCAyMjoxNDo0MiIscnVudGltZT0xMSx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzUzIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJkcmF3Lmx1YSM3NCIsd29ya3NwYWNl
X2luZGV4PTF9LHtsb2NhdGlvbj0idXBkYXRlLmx1YSMxIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xv
Y2F0aW9uPSJ0b29scy5sdWEjMSIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iZ2FtZXBs
YXkubHVhIzIiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249InBhcnRpY2xlcy5sdWEjMSIs
d29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iZXhwbG1haW4ubHVhIzU0Iix3b3Jrc3BhY2Vf
aW5kZXg9MX0se2xvY2F0aW9uPSJwcm9maWxlci5sdWEjODkiLHdvcmtzcGFjZV9pbmRleD0xfSx7
bG9jYXRpb249ImdmeC8wLmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9LHtsb2NhdGlvbj0ibWFwLzAu
bWFwIix3b3Jrc3BhY2VfaW5kZXg9M30se2xvY2F0aW9uPSJzZngvMC5zZngiLHdvcmtzcGFjZV9p
bmRleD00fX1dXQ==
:: [eoc]
